-- phpMyAdmin SQL Dump
-- version 4.7.4
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Янв 14 2018 г., 10:53
-- Версия сервера: 5.7.19
-- Версия PHP: 5.6.31

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `cms`
--

-- --------------------------------------------------------

--
-- Структура таблицы `xyz_articles`
--

DROP TABLE IF EXISTS `xyz_articles`;
CREATE TABLE IF NOT EXISTS `xyz_articles` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `img` varchar(255) NOT NULL,
  `intro` text NOT NULL,
  `full` text NOT NULL,
  `section_id` int(10) UNSIGNED DEFAULT NULL,
  `cat_id` int(10) UNSIGNED DEFAULT NULL,
  `date` int(10) UNSIGNED NOT NULL,
  `meta_desc` varchar(255) NOT NULL,
  `meta_key` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=32 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `xyz_articles`
--

INSERT INTO `xyz_articles` (`id`, `title`, `img`, `intro`, `full`, `section_id`, `cat_id`, `date`, `meta_desc`, `meta_key`) VALUES
(1, 'Создание сайта на HTML', 'html-sozdanie-sajta.jpg', '<p>Пример статьи взят с сети Интернет</p>\r\n<p>Здравствуйте, меня зовут Андре Громов!</p><p>В этой статье я расскажу Вам о создании простейшего сайта. Кто знает, может быть, знания, которые Вы получите в этой статье, впоследствии станут началом Вашего успеха.</p><p>Я склонен полагать, что у Вас имеется большое желание научиться создавать свои собственные сайты. Разумеется, крайне глупо пытаться познать эту науку с изучения какого-нибудь <b>PHP</b>. Гораздо разумнее начать с чего-нибудь попроще, а именно с <b>HTML</b> (<i>HyperText Markup Language</i> - язык гипертекстовой разметки) - базового языка, на котором и построен любой, даже самый сложный сайт. Без этого языка не было бы ни одного сайта, более того, <b>HTML</b> - простейший язык, который может освоить даже школьник (яркий пример - Ваш покорный слуга, начавший осваивать <b>HTML</b> ещё в школе, причём весьма успешно).</p><p>Ладно, хватит болтовни - пора приступать к созданию нашего с Вами первого сайта.</p>', '<p>Пример статьи взят с сети Интернет</p>\r\n<p>Здравствуйте, меня зовут Андрей Громов!</p><p>В этой статье я расскажу Вам о создании простейшего сайта. Кто знает, может быть, знания, которые Вы получите в этой статье, впоследствии станут началом Вашего успеха.</p><p>Я склонен полагать, что у Вас имеется большое желание научиться создавать свои собственные сайты. Разумеется, крайне глупо пытаться познать эту науку с изучения какого-нибудь <b>PHP</b>. Гораздо разумнее начать с чего-нибудь попроще, а именно с <b>HTML</b> (<i>HyperText Markup Language</i> - язык гипертекстовой разметки) - базового языка, на котором и построен любой, даже самый сложный сайт. Без этого языка не было бы ни одного сайта, более того, <b>HTML</b> - простейший язык, который может освоить даже школьник. <p>Ладно, хватит болтовни - пора приступать к созданию нашего с Вами первого сайта, и этот процесс будет называться: Создание сайта на HTML.</p><p>Первое, что нужно решить: где создавать сайт? Разумеется, можно и в обычном блокноте. Но это несерьёзно (мы так в школе писали), поэтому давайте лучше будем использовать что-нибудь \"потяжелее\". Я остановил свой выбор на редакторе \"<b>Notepad++</b>\" - замечательная программа, которая позволяет писать код на огромном количестве языков, в том плане, что это будет весьма и весьма удобно. Не буду сильно её хвалить, потому что для написания кода для серьёзных языков (<b>Java</b>, <b>C++</b> и т. д.) она не подходит - много лишних проблем возникнет. Но для таких языков, как <b>HTML</b>, <b>CSS</b>, <b>JavaScript</b> и даже <b>PHP</b> - очень хороший выбор.</p><p>Скачать <b>Notepad++</b> можно, пройдя по этой ссылке: <a rel=\"external\" title=\"Notepad++\" href=\"http://notepad-plus.sourceforge.net/ru/site.htm\">http://notepad-plus.sourceforge.net/ru/site.htm</a></p><p>Устанавливаем и запускаем редактор. Сразу сохраняем страницу под именем <b>index.html</b>. Теперь пишем (<b>пожалуйста, напишите, а не скопируйте!</b>) в окне редактора:</p><code class=\"code\">&lt;html&gt;<br />&lt;head&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;</code><p>Написали? Сохранили? Поздравляю Вас, Вы только что создали самую простую (но очень важную!!!) HTML-страницу!</p><p>Теперь можно нашу страницу открыть в браузере. Так и поступим.</p><p>Что-нибудь видите? Я уверен, что нет. И это неудивительно, ведь это самая элементарная страница. Вы можете посмотреть исходник страницы. Для этого в меню \"<b>Вид</b>\" выберите пункт меню \"<b>Просмотр HTML кода</b>\", \"<b>Исходный код страницы</b>\" или что-то в этом духе, в зависимости от Вашего браузера. Также можно просто нажать <b>CTRL-U</b> (в большинстве браузеров откроется исходный код страницы), и Вы увидите Ваш код.</p><p>А теперь давайте обсудим, что мы здесь написали.</p><p><b>&lt;html&gt;</b>, <b>&lt;head&gt;</b>, <b>&lt;body&gt;</b> - это открывающие теги. Иногда их ещё называют дескрипторы, но я привык называть их тегами, поэтому далее так и буду писать.</p><p><b>&lt;/html&gt;</b>, <b>&lt;/head&gt;</b>, <b>&lt;/body&gt;</b> - это закрывающие теги.</p><p>Теги бывают парные и одиночные. Парные теги - это теги, которые нуждаются в закрывающем, то есть все три тега, которые мы использовали являются парными, так как они открываются и потом закрываются.</p><p>Одиночные теги - это теги, которые не требуют наличие закрывающего тега.</p><p>Теперь что касается назначения данных тегов.</p><p>Тег <b>&lt;html&gt;</b> означает начало <b>HTML-документа</b>.</p><p>Тег <b>&lt;head&gt;</b> означает начало заголовка <b>HTML-документа</b>. Сюда могут входить, например, заголовок страницы, различные мета-теги. Обо всём об этом погорим чуть ниже.</p><p>Тег <b>&lt;/head&gt;</b> означает конец заголовка <b>HTML-документа</b>.</p><p>Тег <b>&lt;body&gt;</b> означает начало самого документа. То есть всё (текст, картинки, ссылки и т. д.), что Вы видите на страницах в Интернете - всё расположено в теге <b>&lt;body&gt;</b>.</p><p>Тег <b>&lt;/body&gt;</b> означает конец содержимого документа.</p><p>Тег <b>&lt;/html&gt;</b> означает конец <b>HTML-страницы</b>.</p><p>Теперь давайте немного добавим в нашу страницу кода, уж, больно она примитивная у нас пока. Внутри тега <b>&lt;head&gt;</b> добавьте такой код:</p><code class=\"code\">&lt;title&gt;Наша страница&lt;/title&gt;<br />&lt;meta http-equiv=\"Content-type\" content=\"text/html; charset=windows-1251\"&gt;</code><p>Тег <b>&lt;title&gt;</b> определяет заголовок страницы, который будет отображён в заголовке окна браузера.</p><p>Тег <b>&lt;/title&gt;</b> сообщает, что здесь заголовок заканчивается.</p><p>Что касается тега <b>&lt;meta&gt;</b>, то здесь сначала я должен сообщить об атрибутах тегов. У тегов могут быть различные атрибуты, определяющие, например, вид их содержимого. Атрибуты ставятся внутри открывающего тега и имеют следующий вид:</p><p><b>Название = \"значение\".</b></p><p>Тег <b>&lt;meta&gt;</b> у нас определяет тип содержимого документа. Атрибут <b>http-equiv</b> и его значение <b>Content-type</b> определяет, что сейчас будет описан тип документа. Атрибут <b>content</b> и его значение <b>text/html; charset = windows-1251</b> сообщают браузеру, что данный документ является <b>HTML-документом</b> (<b>text/html</b>), и кодировка этого документа кириллица (<b>windows-1251</b>). Это был пример мета-тегов. Я думаю, что пока с ними хватит.</p><p>Теперь займёмся содержимым документа. Надеюсь, что Вы уже поняли, что раз содержимое страницы - значит, будем писать что-то внутри тега <b>&lt;body&gt;</b>. Давайте напишем следующий код внутри тега <b>&lt;body&gt;</b>:</p><code class=\"code\">&lt;h1&gt;Заголовок 1-го уровня&lt;/h1&gt;<br />&lt;h2&gt;Заголовок 2-го уровня&lt;/h2&gt;<br />&lt;h3&gt;Заголовок 3-го уровня&lt;/h3&gt;<br />&lt;h4&gt;Заголовок 4-го уровня&lt;/h4&gt;<br />&lt;h5&gt;Заголовок 5-го уровня&lt;/h5&gt;<br />&lt;h6&gt;Заголовок 6-го уровня&lt;/h6&gt;</code><p>Теги <b>&lt;h1&gt;</b>, <b>&lt;h2&gt;</b>, <b>&lt;h3&gt;</b>, <b>&lt;h4&gt;</b>, <b>&lt;h5&gt;</b>, <b>&lt;h6&gt;</b> - выводят текст в браузере. Причём этот текст является заголовком, более того, чем больше цифра (от <b>1-го</b> до <b>6-ти</b>), тем менее крупным шрифтом будет выведен соответствующий текст. Таким образом, код Вашей страницы имеет вид:</p><code class=\"code\">&lt;html&gt;<br />&lt;head&gt;<br />&nbsp; &lt;title&gt;Наша страница&lt;/title&gt;<br />&nbsp; &lt;meta http-equiv=\"Content-type\" content=\"text/html; charset=windows-1251\"&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&nbsp; &lt;h1&gt;Заголовок 1-го уровня&lt;/h1&gt;<br />&nbsp; &lt;h2&gt;Заголовок 2-го уровня&lt;/h2&gt;<br />&nbsp; &lt;h3&gt;Заголовок 3-го уровня&lt;/h3&gt;<br />&nbsp; &lt;h4&gt;Заголовок 4-го уровня&lt;/h4&gt;<br />&nbsp; &lt;h5&gt;Заголовок 5-го уровня&lt;/h5&gt;<br />&nbsp; &lt;h6&gt;Заголовок 6-го уровня&lt;/h6&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;</code><p>Сохраните страницу и посмотрите на неё в браузере.</p><p>Также можно добавить немного атрибутов и в тег <b>&lt;body&gt;</b>. Давайте добавим атрибут <b>text</b> со значением <b>green</b> (зелёный). И атрибут <b>bgcolor</b> со значением <b>yellow</b> (жёлтый).</p><p>Таким образом, тег <b>&lt;body&gt;</b> выглядит так:</p><code class=\"code\">&lt;body text = \"green\" bgcolor = \"yellow\"&gt;<br />&nbsp; &lt;h1&gt;Заголовок 1-го уровня&lt;/h1&gt;<br />&nbsp; &lt;h2&gt;Заголовок 2-го уровня&lt;/h2&gt;<br />&nbsp; &lt;h3&gt;Заголовок 3-го уровня&lt;/h3&gt;<br />&nbsp; &lt;h4&gt;Заголовок 4-го уровня&lt;/h4&gt;<br />&nbsp; &lt;h5&gt;Заголовок 5-го уровня&lt;/h5&gt;<br />&nbsp; &lt;h6&gt;Заголовок 6-го уровня&lt;/h6&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;</code><p>Сохраните страницу и посмотрите на неё в браузере. Как видите, фон страницы стал жёлтым, а текст стал зелёным.</p><p>Думаю, что на сегодня хватит для Вас материала. Очень полезно будет потренироваться в выводе разного текста, разными цветами.</p><p>Увидимся в следующей статье!</p>', 1, 1, 1271865226, 'Описание процесса создания сайта на языке HTML.', 'создание сайта на html, язык html, первый сайт на html'),
(2, 'Ссылки и изображения в HTML', 'html-ssylki-i-izobrageniya.jpg', '<p>Пример статьи взят с сети Интернет</p>\r\n<p>В этой статье я расскажу Вам о добавлении изображений и ссылок на Вашу <b>HTML-страницу</b>.</p><p>Я думаю, что Вы ни разу не встречали ни одной страницы в Интернете, на которой не было ни одного изображения или ссылки. Поэтому материал данной статьи весьма важен, в то же время он очень прост, благодаря чему его сможет освоить даже школьник.</p><p>Первое, что мы сделаем - это добавим ссылку на нашу страницу.</p>', '<p>Пример статьи взят с сети Интернет</p>\r\n<p>В этой статье я расскажу Вам о добавлении изображений и ссылок на Вашу <b>HTML-страницу</b>.</p><p>Я думаю, что Вы ни разу не встречали ни одной страницы в Интернете, на которой не было ни одного изображения или ссылки. Поэтому материал данной статьи весьма важен, в то же время он очень прост, благодаря чему его сможет освоить даже школьник.</p><p>Первое, что мы сделаем - это добавим <b>HTML ссылку</b> на нашу страницу.</p><p>Для этого напишем в теге <b>&lt;body&gt;</b> такой код:</p><code class=\"code\">&lt;a target = \"_self\" href = \"index.html\" title = \"Ссылка\"&gt;Ссылка на эту страницу&lt;/a&gt;</code><p>Тег HTML <b>&lt;a&gt;</b> означает начало ссылки. У этого тега есть различные атрибуты. Давайте начнём с \"<b>target</b>\".</p><p>Атрибут \"<b>target</b>\" может принимать три значения (их чуть больше, но они слишком редко применяются, поэтому не буду их даже упоминать): \"<b>_self</b>\", \"<b>_new</b>\", \"<b>_blank</b>\". Вообще говоря, результат этих атрибутов у разных браузеров зачастую происходит по-разному, поэтому я скажу, что означает каждое значение атрибута \"<b>target</b>\" лишь в теории, а не на практике.</p><p>Значение \"<b>_self</b>\" означает, что страница откроется в этом же окне.</p><p>Значение \"<b>_new</b>\" означает, что страница откроется в новом окне (некоторые браузеры открывают не новое окно, а создают новую вкладку в браузере).</p><p>Значение \"<b>_blank</b>\" означает, что страница будет открыта в новой вкладке.</p><p>Я настоятельно рекомендую Вам испробовать все значения этого атрибута в различных браузерах, чтобы окончательно понять, что каждое из них означает.</p><p>Следующий атрибут \"<b>href</b>\" означает путь к странице. Так как нам пока ссылаться не на что, то приходится сослаться на ту же страницу. Что касается формы записи, то здесь бывают абсолютные и относительные пути.</p><p>Абсолютный путь задаёт полный путь к файлу, например, так: \"<b>http://mysite.ua/images/image1.gif</b>\". А относительный путь указывают путь относительно каталога, в котором находится текущий файл. Например, наш файл \"<b>index.html</b>\" лежит в корне сервера, а мы пишем: \"<b>href = \'images/image1.gif\'</b>\". Это означает то же самое, что и если бы мы написали: \"<b>http://mysite.ua/images/image1.gif</b>\". Это, что касается абсолютных и относительных путей.</p><p>Надеюсь, что с атрибутом \"<b>href</b>\" всё стало понятно. Разумеется, ссылаться можно не только на <b>HTML-страницы</b>, но и на любые файлы, будь то картинки, будь то фильмы, будь то музыка, будь то архивы, будь то ещё всё, что угодно.</p><p>Последний атрибут - это \"<b>title</b>\". Здесь всё совсем просто. Этот атрибут задаёт текст, который будет виден при наведении мышки на ссылку.</p><p>С атрибутами тега <b>&lt;a&gt;</b> покончено. Что касается того, что внутри тега, то здесь только Ваша фантазия. В большинстве случаев - это обычный текст, как, например, у нас. Очень часто делают картинку внутри тега <b>&lt;a&gt;</b>, тогда эта ссылка будет в виде картинки.</p><p>Тег <b>&lt;/a&gt;</b> означает конец гиперссылки.</p><p>Также можно задавать <b>цвет ссылок</b>. Опять же будет работать или нет - зависит от браузера. Но всё-таки, давайте я Вас с этим познакомлю. Добавим в тег <b>&lt;body&gt;</b> три атрибута : \"<b>link</b>\", \"<b>vlink</b>\" и \"<b>alink</b>\". Каждый из этих трёх атрибутов может принимать значение какого-либо цвета. Атрибут \"<b>link</b>\" означает цвет непосещённой ссылки. Соответственно, \"<b>vlink</b>\" указывает цвет посещённой ссылки. И, наконец, атрибут \"<b>alink</b>\" указывает цвет ссылки в момент непосредственного нажатия. Как видите, здесь тоже ничего сложного нет.</p><p>Теперь добавим изображения, но прежде, чем это делать. Сразу после добавления <b>HTML-ссылки</b> ставим тег <b>\"&lt;br&gt;\"</b>. Этот тег также является одиночным, и он означает переход на новую строку. Напишем в теге <b>&lt;body&gt;</b> такой код:</p><code class=\"code\">&lt;img src = \"image1.gif\" alt = \"Картинка\" width = \"100\" height = \"100\"&gt;</code><p>Тег <b>&lt;img&gt;</b> означает, что мы хотим добавить здесь изображение. Этот тег, как видно, является одиночным, то есть у него нет закрывающего тега. Атрибуты тега также очень и очень простые.</p><p>Атрибут \"<b>src</b>\" указывает путь к картинке. Опять же можно указывать, как абсолютный путь, так и относительный путь, в зависимости от ситуации.</p><p>Атрибут \"<b>alt</b>\" указывает текст, который описывает картинку. Этот же текст будет показываться в случае, если картинка по каким-либо причинам будет не найдена, либо у пользователя в браузере отключён показ картинок. Очень желательно этот атрибут ставить, так как это помогает оптимизации сайта (впрочем, это уже раскрутка сайта, а не его создание).</p><p>Атрибуты \"<b>width</b>\" и \"<b>height</b>\" указывают ширину и высоту картинки соответственно. Если их не указывать, то картинка будет иметь такой размер, какой имеет исходник.</p><p>Советую потренироваться, выводя различные изображения, только предварительно разместите файлы картинок вместе с \"<b>index.html</b>\". Например, создайте в этом же каталоге папку \"<b>images</b>\" и размещайте туда изображения. А в атрибуте \"<b>src</b>\" пишите значение \"images/Имя файла картинки\".</p><p>Таким образом, код Вашей страницы должен быть примерно таким:</p><code class=\"code\">&lt;html&gt;<br />&lt;head&gt;<br />&lt;/head&gt;<br />&lt;body text = \"green\" bgcolor = \"yellow\" link = \"green\" vlink = \"red\" alink = \"blue\"&gt;<br />&nbsp; &lt;h1&gt;Заголовок 1-го уровня&lt;/h1&gt;<br />&nbsp; &lt;a target = \"_new\" href = \"index.html\" title = \"Ссылка\"&gt;Ссылка на эту страницу&lt;/a&gt;<br />&nbsp; &lt;br&gt;<br />&nbsp; &lt;img src = \"Водяные лилии.jpg\" alt = \"Картинка\" width = \"100\" height = \"100\"&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;</code><p>Вот и вся наука. Как видите, ничего сложного нет, как и всё в базовых знаниях по HTML> и базовых знаниях по созданию сайта.</p><p>До встречи в следующей статье.</p>', 1, 1, 1272093191, 'Создание ссылок и изображений в HTML, тег img и тег a. Также здесь рассматриваются атрибуты этих тегов.', 'ссылки html, изображения html, добавление ссылок html, добавление изображений html'),
(3, 'Синтаксис CSS', 'css-sintaksis.jpg', '<p>Пример статьи взят с сети Интернет</p><p>В этой статье хочется затронуть тему, как создать стиль, как выглядит код и как он работает, то есть <b>синтаксис CSS</b>. Синтаксис следующий: вначале идёт селектор, потом в фигурных скобках указываются свойства и через двоеточие их значения.</p><p>Давайте рассмотрим эти правила на примере:</p>', '<p>Пример статьи взят с сети Интернет</p><p>В этой статье хочется затронуть тему, как создать стиль, как выглядит код и как он работает, то есть <b>синтаксис CSS</b>. Синтаксис следующий: вначале идёт селектор, потом в фигурных скобках указываются свойства и через двоеточие их значения.</p><p>Давайте рассмотрим эти правила на примере:</p><code class=\"code\">h1 {<br />&nbsp; color: red;<br />&nbsp; margin-left: 200px;<br />&nbsp; font-size: 20pt;<br />}</code><p>В данном примере селектором является \"<b>h1</b>\", свойствами являются \"<b>color</b>\", \"<b>margin-left</b>\" и \"<b>font-size</b>\", а их значениями соответственно являются \"<b>red</b>\", \"<b>200px</b>\" и \"<b>20pt</b>\". Что это всё означает? А это означает следующее, что элемент внутри тега <b>&lt;h1&gt;</b> станет красным, с отступом слева в <b>200 пикселей</b> и размером в <b>20 пунктов</b>.</p><p>Существует огромное количество свойств и их значений, разумеется, приводить их все - это бессмысленно. Самый разумный вариант посмотреть их в справочнике, а здесь же необходимо понимать следующее, что селекторов тоже несколько. Вот их список:</p><p>1) <b>Контекстные селекторы</b>.</p><p>2) <b>Селектор ID</b>.</p><p>3) <b>Селектор CLASS</b>.</p><p>4) <b>Селекторы параметров</b>.</p><p>5) <b>Стандартный селектор</b>.</p><p>Мы с Вами рассмотрели только один стандартный селектор, когда в его качестве выступает обычный <b>HTML-тег</b> (в примере выше, этим тегом был <b>&lt;h1&gt;</b>).</p><p>Первые четыре типа селектора CSS обсудим в другой статье в основах CSS. А пятый тип давайте разберём ещё раз.</p><p>Первое, что необходимо сделать - это написать <b>HTML-тег</b> (любой из <b>HTML-стандарта</b>). Потом в фигурных скобках указать его свойства и через двоеточие значение. Уверен, что здесь всё понятно.</p><p>И, напоследок, хочется сразу разобрать тему <b>псевдоэлементов</b>. <b>Псевдоэлементы</b> нужны для настройки свойств определённого состояния элемента. Например, состояние \"<i>наведение мышки</i>\" на ссылку, \"<i>щелчок мышки</i>\" по ссылке и тому подобные вещи. Или, например, первая строка текста. И ещё много чего ещё. Опять же полный набор <b>псевдоэлементов</b> можно посмотреть в справочнике. Я же покажу, как их использовать:</p><code class=\"code\">a:visited {<br />&nbsp; color: red;<br />}<br />a: link {<br />&nbsp; color: blue;<br />}</code><p>В данном случае, мы задали следующий стиль: посещённые ссылки (состояние \"<i>ссылка уже была нажата</i>\") красного цвета, а не посещённые ссылки (состояние \"<i>ссылка ещё не была нажата</i>\") будут синего цвета. Как видите, <b>псевдоэлементы</b> задаются через двоеточие. То есть пишется тег, у которого могут быть <b>псевдоэлементы</b>, дальше ставится двоеточие и пишется название <b>псевдоэлемента</b>. Потом, как обычно, указываются свойства и их значения. И если у данных элементов будет соответствующее <b>псевдоэлементу</b> состояние, то стили будут к нему применены.</p><p>Надеюсь, что я познакомил Вас с основами <b>синтаксиса CSS</b>. Если Вы это освоили, то можно двигаться дальше в освоении процесса самостоятельного создания сайта.', 2, 3, 1279562836, 'Статья о синтаксисе каскадных таблиц стилей - CSS.', 'синтаксис css, синтаксис языка css'),
(4, 'Как задать CSS стиль', 'css-kak-zadat-stil.jpg', '<p>Пример статьи взят с сети Интернет</p>\r\n<p>Существует четыре способа задания <b>CSS</b> стиля для тегов <b>HTML</b>:</p><p>1) <b>Inline-стиль</b>.</p><p>2) <b>Внедрённый</b> стиль</p><p>3) <b>Импортированный</b> стиль.</p><p>4) <b>Стиль из файла</b>.</p><p>И в этой статье мы разберём все четыре способа.</p>', '<p>Пример статьи взят с сети Интернет</p>\r\n<p>Существует четыре способа задания <b>CSS</b> стиля для тегов <b>HTML</b>.</p><p>1) <b>Inline-стиль</b>.</p><p>2) <b>Внедрённый</b> стиль</p><p>3) <b>Импортированный</b> стиль.</p><p>4) <b>Стиль из файла</b>.</p><p>И в этой статье мы разберём все четыре способа.</p><p>Для начала первый способ - это <b>inline-стиль</b>. Данный стиль указывается непосредственно в самом теге. Например:</p><code class=\"code\">&lt;p style = \"font-size: 150%; text-align: center;\"&gt;текст&lt;/p&gt;</code><p>В данном случае мы задали, чтобы элемент \"<i>текст</i>\" будет размером в <b>150%</b> и выравнен по <b>центру</b>. Это пример <b>inline-стиля</b>.</p><p>Второй способ - это внедрённый <b>CSS стиль</b>, то есть стиль, который задаётся в голове документа, в теге <b>&lt;head&gt;</b>. Например, так:</p><code class=\"code\">&lt;head&gt;<br />&nbsp; &lt;style&gt;<br />&nbsp;&nbsp;&nbsp; h1 {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; color: red;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; margin-top: 100px;<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp; &lt;/style&gt;<br />&lt;/head&gt;</code><p>Здесь будет происходить следующее: для всех элементов внутри тега <b>&lt;h1&gt;</b> будет сделано следующее: их цвет будет красным и отступ сверху будет 100 пикселей.</p><p>Третий способ задания <b>CSS стиля</b> - это <b>импортированные стили</b>. Они также, как и <b>внедрённые</b> задаются в голове документа, но уже из файла. Вот пример:</p><code class=\"code\">&lt;head&gt;<br />&nbsp; &lt;style&gt;<br />&nbsp;&nbsp;&nbsp; @import url(\"my.css\");<br />&nbsp; &lt;/style&gt;<br />&lt;/head&gt;</code><p>Здесь ко всей странице будут применяться стили из файла \"<i>my.css</i>\".</p><p>И последние вид <b>CSS стилей</b> - это стили из файла. Данный способ является самым частым, и заключается он в подключении файла стиля через тег <b>&lt;link&gt;</b> в голове документа. Например, таким образом:</p><code class=\"code\">&lt;head&gt;<br />&nbsp; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"my.css\"&gt;<br />&lt;/head&gt;</code><p>Данный способ очень похож на предыдущий способ, но здесь не используется тег <b>&lt;style&gt;</b>, и есть ещё одно отличие. Причём, это отличие характерно для всех способов задания <b>CSS стиля</b>. И это отличие - <b>приоритет</b>.</p><p>Когда проявляется приоритет? А проявляется он при возникновении <b>конфликтных ситуаций</b>, связанных с попыткой одному и тому же элементу задать противоречивый стиль. Например, через <b>inline-стиль</b> пытаемся сделать цвет красным, а через <b>импортированный</b> стиль пытаемся сделать цвет этого элемента чёрным. Во избежание таких противоречивых ситуаций, необходимо расставить приоритеты: какой способ с самым высоким приоритетом, а какой, наоборот, с самым низким. Приоритеты в порядке возрастания следующие:</p><p>1) <b>Стиль</b> из файла.</p><p>2) <b>Импортированный стиль</b>.</p><p>3) <b>Внедрённый стиль</b>.</p><p>4) <b>Inline-стиль</b>.</p><p>Таким образом, <b>inline-стиль</b> имеет наибольший приоритет. И, пользуясь этим, можно сделать вывод, что в примере выше цвет элемента будет красным, а не чёрным.</p><p>Какие выводы можно сделать?</p><p>1) <b>Общий стиль</b> для всего сайта должен быть вынесен в отдельный файл и подключаться на каждой странице через тег <b>&lt;link&gt;</b>, ввиду того, что данный стиль является стилем с минимальным приоритетом, его в частных случаях можно будет изменить.</p><p>2) <b>Импортированный стиль</b> надо использовать, когда <b>2 и более страниц (но не все)</b> имеют определённые особенности в стиле.</p><p>3) <b>Внедрённый стиль</b> надо использовать для задания уникальных <b>CSS стилей</b> для конкретной страницы. Эти стили уникальны для каждой страницы сайта.</p><p>4) <b>Inline-стиль</b> надо использовать, когда отдельный элемент на отдельной странице требует особенного вида.</p><p>Руководствуясь данными принципами, Вы никогда не запутаетесь в <b>CSS-стилях</b>.</p><p>Напоследок, хочется привести небольшой пример, как надо следовать этим принципам. Допустим, Вы хотите по-разному выводить элемент внутри тега <b>&lt;p&gt;</b>. Перед Вам стоят такие задачи:</p><p>1) Размер шрифта на <b>всех страницах сайта</b> должен быть <b>15pt</b>, а цвет <b>чёрным</b>.</p><p>2) <b>На всех страницах, кроме одной</b>, цвет текста внутри этого элемента должен быть <b>красным</b>.</p><p>3) <b>На каждой странице, отступы будут разными</b>.</p><p>4) <b>В отдельных случаях</b> может быть <b>изменён размер и цвет текста</b>.</p><p>Я, думаю, что здесь всё прозрачно, но тем не менее, давайте поясню порядок действий:</p><p>1) В отдельный файл вынести стиль, где задаётся размер и цвет. Потом подключить данный стиль через тег <b>&lt;link&gt;</b>.</p><p>2) В отдельный файл вынести стиль, где задаётся красный цвет текста. Потом подключить его, как <b>импортированный стиль</b> к нужным страницам.</p><p>3) На каждой странице внутри тега <b>&lt;style&gt;</b> сделать разные отступы для тега <b>&lt;p&gt;</b>.</p><p>4) У нужных тегов <b>&lt;p&gt;</b> настроить должным образом размер и цвет текста.</p><p>Как видите, ничего сложного нет, а освоив это Вам будет гораздо проще создавать дизайн своего сайта, который необходим при создании сайтов с нуля. О других основах CSS можно почитать в этой же категории.</p>', 2, 3, 1279565532, 'Статья о том, как использовать CSS стили, и как распределяются приоритеты при их использовании.', 'задание css стиля, способы задания css стиля, приоритеты css стилей'),
(8, 'Фабричный метод', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Один HR-менеджер не в силах провести собеседования со всеми кандидатами на все должности. В зависимости от вакансии он может делегировать разные этапы собеседований разным сотрудникам.</p>\r\n\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n\r\n<p>Это способ делегирования логики создания объектов (instantiation logic) дочерним классам.</p>\r\n\r\n', '<p><b>Аналогия</b></p>\r\n\r\n<p>Один HR-менеджер не в силах провести собеседования со всеми кандидатами на все должности. В зависимости от вакансии он может делегировать разные этапы собеседований разным сотрудникам.</p>\r\n\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n\r\n<p>Это способ делегирования логики создания объектов (instantiation logic) дочерним классам.</p>\r\n<p><b>Википедия</b></p>\r\n\r\n<p>В классо-ориентированном программировании (class-based programming) фабричным методом называют порождающий шаблон проектирования, использующий генерирующие методы (factory method) для решения проблемы создания объектов без указания для них конкретных классов. Объекты создаются посредством вызова не конструктора, а генерирующего метода, определённого в интерфейсе и реализованного дочерними классами либо реализованного в базовом классе и, опционально, переопределённого (overridden) производными классами (derived classes).</p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Сначала создадим интерфейс сотрудника, проводящего собеседование, и некоторые реализации для него.<p>\r\n<pre>interface Interviewer\r\n{\r\n    public function askQuestions();\r\n}\r\n\r\nclass Developer implements Interviewer\r\n{\r\n    public function askQuestions()\r\n    {\r\n        echo \'Asking about design patterns!\';\r\n    }\r\n}\r\n\r\nclass CommunityExecutive implements Interviewer\r\n{\r\n    public function askQuestions()\r\n    {\r\n        echo \'Asking about community building\';\r\n    }\r\n}</pre>\r\n<p>Теперь создадим HR-менеджера HiringManager.</p><pre>abstract class HiringManager\r\n{\r\n\r\n    // Фабричный метод\r\n    abstract public function makeInterviewer(): Interviewer;\r\n\r\n    public function takeInterview()\r\n    {\r\n        $interviewer = $this->makeInterviewer();\r\n        $interviewer->askQuestions();\r\n    }\r\n}</pre><p>Любой дочерний класс может расширять его и предоставлять нужного собеседника:</p><pre>class DevelopmentManager extends HiringManager\r\n{\r\n    public function makeInterviewer(): Interviewer\r\n    {\r\n        return new Developer();\r\n    }\r\n}\r\n\r\nclass MarketingManager extends HiringManager\r\n{\r\n    public function makeInterviewer(): Interviewer\r\n    {\r\n        return new CommunityExecutive();\r\n    }\r\n}</pre><p>Использование:</p><pre>$devManager = new DevelopmentManager();\r\n$devManager->takeInterview(); // Output: Спрашивает о шаблонах проектирования.\r\n\r\n$marketingManager = new MarketingManager();\r\n$marketingManager->takeInterview(); // Output: Спрашивает о создании сообщества.</pre><p><b>Когда использовать?</b></p><p>Этот шаблон полезен для каких-то общих обработок в классе, но требуемые подклассы динамически определяются в ходе выполнения (runtime). То есть когда клиент не знает, какой именно подкласс может ему понадобиться</p>', 3, 4, 742377364, 'Это способ делегирования логики создания объектов (instantiation logic) дочерним классам.', 'Фабричный, Фабрика'),
(5, 'Селекторы CSS', 'css-selektory.jpg', '<p>Пример статьи взят с сети Интернет</p><p>В этой статье мы разберём различные виды селекторов. У каждого из них своя задача и каждый срабатывает лишь при соблюдении условий, и по этим условиям делятся на несколько видов:</p><p>1) <b>Обычный селектор</b>.</p><p>2) <b>Контекстный селектор</b>.</p><p>3) <b>Селектор ID</b>.</p><p>4) <b>Селектор CLASS</b>.</p><p>5) <b>Селектор параметров</b>.</p>', '<p>Пример статьи взят с сети Интернет</p><p>В этой статье мы разберём различные виды селекторов. У каждого из них своя задача и каждый срабатывает лишь при соблюдении условий, и по этим условиям делятся на несколько видов:</p><p>1) <b>Обычный селектор</b>.</p><p>2) <b>Контекстный селектор</b>.</p><p>3) <b>Селектор ID</b>.</p><p>4) <b>Селектор CLASS</b>.</p><p>5) <b>Селектор параметров</b>.</p><p>Обсуждать <b>обычный селектор</b> мы не будем, потому что, во-первых, мы его обсуждали, а, во-вторых, это обычный <b>HTML-тег</b>, поэтому тут и сказать нечего.</p><p>А теперь подробно разберём <b>контекстные селекторы</b>, так как их используют, пожалуй, чаще всего. Они нужны для того, чтобы к элементу применялся стиль при условии, что данный элемент лежит внутри тега, который лежит внутри другого тега. Звучит запутанно, не спорю, но давайте разберёмся на примере</p><code class=\"code\">&lt;div&gt;&lt;h2&gt;Заголовок в контейнере&lt;/h2&gt;&lt;/div&gt;</code><p>Элемент, в данном случае - это текст \"<i>заголовок в контейнере</i>\" лежит в теге <b>&lt;h2&gt;</b>, который в свою очередь лежит в теге <b>&lt;div&gt;</b>. Этот пример поясняет то, что я написал чуть выше. А теперь вернёмся к контекстным селекторам. Синтаксис следующий:</p><code class=\"code\">тег1 тег2 {<br />&nbsp; свойство1: значение1;<br />&nbsp; свойство2: значение2;<br />}</code><p>И работает это так: если <i>тег2</i> находится внутри <i>тега 1</i>, то элементы внутри <i>тега2</i> примут <i>свойства1</i> и <i>свойства2</i> со значениями <i>значение1</i> и <i>значение2</i>. А теперь пример <b>CSS</b> для примера выше.</p><code class=\"code\">div h2 {<br />&nbsp; font-weight: bold;<br />}</code><p>Такой стиль будет применён к примеру выше и \"<i>заголовок в контейнере</i>\" станет жирным. А если будет написано просто:</p><code class=\"code\">&lt;h2&gt;Заголовок&lt;/h2&gt;</code><p>То стиль применён к этому элементу не будет, ведь он не находится внутри тега <b>&lt;div&gt;</b>.</p><p>Вопрос: для чего же нужны <b>контекстные селекторы</b>? Их Вы будете вынуждены использовать многократно, ввиду того, что на Вашей странице наверняка будет множество повторяющихся тегов (<b>&lt;div&gt;</b>, <b>&lt;p&gt;</b>, <b>&lt;tr&gt;</b>, <b>&lt;td&gt;</b>, <b>&lt;table&gt;</b> и прочие), и, разумеется, Вы захотите, чтобы у них был далеко не всегда одинаковый внешний вид. И вот тут и придут на помощь <b>контекстные селекторы</b>.</p><p><b>Селекторы ID</b> тоже очень распространены. Они позволяют задать уникальный элемент на странице, и синтаксис объявления этого селектора следующий:</p><code class=\"code\">имятега#имя {<br />&nbsp; свойство1: значение1;<br />&nbsp; свойство2: значение2;<br />}</code><p>Теперь если тегу \"<i>имятега</i>\" имеет атрибут \"<i>id</i>\" со значением \"<i>имя</i>\", то к элементам внутри тега \"<i>имятега</i>\" будет применён стиль.</p><p>Если \"<i>имятега</i>\" отсутствует (то есть селектор начинается с символа \"#\"), то тогда данный стиль может быть применён к любым тегам, у которых стоит атрибут \"<i>id</i>\" в значении \"<i>имя</i>\".</p><p>А теперь пример:</p><code class=\"code\">#red {<br />&nbsp; color: red;<br />}</code><p>И теперь <b>HTML-код</b>, к которому будет применён данный стиль:</p><code class=\"code\">&lt;p id = \"red\"&gt;Красный текст&lt;/p&gt;</code><p>Как видите, всё очень просто, однако есть одно большое <b>НО!</b> Используйте <b>ОДИН идентификатор только ОДИН РАЗ на странице!</b> Например, вот так писать нельзя:</p><code class=\"code\">&lt;p id = \"red\"&gt;Красный текст&lt;/p&gt;<br />&lt;p id = \"red\"&gt;Ещё один красный текст&lt;/p&gt;</code><p>В таких случаях надо создавать два идентификатора вот так:</p><code class=\"code\">#red1, #red2 {<br />&nbsp; color: red;<br />}</code><p>И <b>HTML-код</b>:</p><code class=\"code\">&lt;p id = \"red1\"&gt;Красный текст&lt;/p&gt;<br />&lt;p id = \"red2\"&gt;Ещё один красный текст&lt;/p&gt;</code><p>Вот теперь будет правильно. Кстати, обратите внимание на \"запятую\" в описании селектора. Это частый приём для сокращения количества строк в стиле. Если у Вас два или более элемента имеют один и тот же стиль, то Вы можете через запятую перечислить все селекторы, а потом сразу для всех написать соответствующий стиль, как в примере выше.</p><p>Теперь о <b>селекторе CLASS</b>. Он очень похож на <b>селектор ID</b>, но его \"имя\" может использоваться несколько раз на странице. Общий синтаксис этого селектора следующий:</p><code class=\"code\">имятега.имя {<br />&nbsp; свойство1: значение1;<br />&nbsp; свойство2: значение2;<br />}</code><p>Таким образом, если у тега \"<i>имятега</i>\" стоит атрибут \"<i>class</i>\" со значением \"<i>имя</i>\", то к элементам внутри будет применён данный стиль.</p><p>Аналогично, с <b>селектором ID</b>, если \"<i>имятега</i>\" не задано (то есть описание селектора начинается с символа \".\"), то данный стиль может быть присвоен любым элементам.</p><p>А теперь пример:</p><code class=\"code\">.red {<br />&nbsp; color: red;<br />}</code><p>И <b>HTML-код</b> под этот стиль:</p><code class=\"code\">&lt;p class = \"red\"&gt;Красный текст&lt;/p&gt;<br />&lt;p class = \"red\"&gt;Ещё один красный текст&lt;/p&gt;</code><p>Вновь всё очень просто. Теперь встаёт вопрос: чем же тогда лучше <b>селектор ID</b>? А лучше он тем, что к данным элементам очень удобное обращение через, например, <b>JavaScript</b>. Поэтому очень удобно задать именно <b>ID</b>, при условии, что такой элемент всего один на странице, то есть он является уникальным.</p><p>И последний тип <b>селекторов CSS</b> - это <b>селектор параметров</b>. Не очень часто используют, но в некоторых случаях он является практически незаменимым. Я, надеюсь, что Вы заметили, что вид многих тегов зависит от их атрибутов. Ярким примеров является тег <b>&lt;input&gt;</b>, который может быть и кнопкой, и переключателем, и текстовым полем. Согласитесь, что выглядят все эти элементы совершенно по-разному, однако, отвечает за них один и тот же тег. И для того, чтобы применять стиль лишь при определённом значении какого-либо атрибута, и используют селекторы параметров. Синтаксис следующий</p><code class=\"code\">имятега[имяатрибута=\"значениеатрибута\"] {<br />&nbsp; свойство1: значение1;<br />&nbsp; свойство2: значение2;<br />}</code><p>Применяется данный стиль в следующем случае: если в теге \"имятега\" значение \"имяатрубита\" равно \"значениеатрибута\" то будет применён стиль, в противном случае стиль не применяется.</p><p>Чтобы стало ещё понятнее, привожу пример:</p><code class=\"code\">input[type=\"submit\"] {<br />&nbsp; border: 2px double black;<br />}</code><p>И <b>HTML</b>:</p><code class=\"code\">&lt;input type = \"submit\" value = \"Кнопка с двойной чёрной рамкой\"&gt;<br />&lt;input type = \"button\" value = \"Другая кнопка\"&gt;</code><p>Надеюсь, что и здесь всё прозрачно. Ещё один очень важный момент, виды <b>селекторов</b> можно совмещать, например, данный <b>CSS</b> вполне нормальный и рабочий:</p><code class=\"code\">#header li a {<br />&nbsp; font-size: 150%;<br />}</code><p>И <b>HTML-код</b>, который вызовет этот стиль:</p><code class=\"code\">&lt;ul id = \"header\"&gt;<br />&nbsp; &lt;li&gt;<br />&nbsp;&nbsp;&nbsp; &lt;a href = \"http://myrusakov.ru\"&gt;Текст с размером 150%&lt;/a&gt;<br />&nbsp; &lt;/li&gt;<br />&lt;/ul&gt;</code><p>Думаю, что и здесь вопросов не возникнет.</p><p>Напоследок хочется сказать, что <b>селекторы</b> - это основа CSS, которую обязан знать любой, кто создаёт сайты с нуля. А как применять эти <b>селекторы</b> - это уже зависит только от Ваших дизайнерских навыков.</p>', 2, 3, 1279730696, 'Типы селекторов CSS: контекстный селектор, селектор ID, селектор CLASS, селектор параметров.', 'селекторы css, виды селекторов css, контекстные селекторы, селектор id, селектор class, селектор параметров'),
(7, ' Простая фабрика', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, вы строите дом и вам нужны двери. Будет бардак, если каждый раз, когда вам требуется дверь, вы станете вооружаться инструментами и делать её на стройплощадке. Вместо этого вы закажете двери на фабрике.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Простая фабрика просто генерирует экземпляр для клиента без предоставления какой-либо логики экземпляра.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, вы строите дом и вам нужны двери. Будет бардак, если каждый раз, когда вам требуется дверь, вы станете вооружаться инструментами и делать её на стройплощадке. Вместо этого вы закажете двери на фабрике.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Простая фабрика просто генерирует экземпляр для клиента без предоставления какой-либо логики экземпляра.</p>\r\n\r\n<p><b>Википедия</b></p>\r\n\r\n<p>В объектно ориентированном программировании фабрикой называется объект, создающий другие объекты. Формально фабрика — это функция или метод, возвращающая объекты разных прототипов или классов из вызова какого-то метода, который считается новым.</p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Для начала нам нужен интерфейс двери и его реализация.</p>\r\n<pre>interface Door\r\n{\r\n    public function getWidth(): float;\r\n    public function getHeight(): float;\r\n}\r\n\r\nclass WoodenDoor implements Door\r\n{\r\n    protected $width;\r\n    protected $height;\r\n\r\n    public function __construct(float $width, float $height)\r\n    {\r\n        $this->width = $width;\r\n        $this->height = $height;\r\n    }\r\n\r\n    public function getWidth(): float\r\n    {\r\n        return $this->width;\r\n    }\r\n\r\n    public function getHeight(): float\r\n    {\r\n        return $this->height;\r\n    }\r\n}</pre>\r\n\r\n<p>Теперь соорудим фабрику дверей, которая создаёт и возвращает нам двери.</p>\r\n\r\n<pre>class DoorFactory\r\n{\r\n    public static function makeDoor($width, $height): Door\r\n    {\r\n        return new WoodenDoor($width, $height);\r\n    }\r\n}</pre>\r\n\r\n<p>Использование:</p>\r\n\r\n<pre>$door = DoorFactory:makeDoor(100, 200);\r\necho \'Width: \' . $door->getWidth();\r\necho \'Height: \' . $door->getHeight();</pre>\r\n\r\n<p><b>Когда использовать?</b></p>\r\n\r\n<p>Когда создание объекта подразумевает какую-то логику, а не просто несколько присваиваний, то имеет смысл делегировать задачу выделенной фабрике, а не повторять повсюду один и тот же код.</p>', 3, 4, 64554642, 'Простая фабрика просто генерирует экземпляр для клиента без предоставления какой-либо логики экземпляра.', 'Простая фабрика, фабрика'),
(9, 'Абстрактная фабрика', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Вернёмся к примеру с дверями из «Простой фабрики». В зависимости от своих потребностей вы можете купить деревянную дверь в одном магазине, стальную — в другом, пластиковую — в третьем. Для монтажа вам понадобятся разные специалисты: деревянной двери нужен плотник, стальной — сварщик, пластиковой — спец по ПВХ-профилям.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n<p>Это фабрика фабрик. То есть фабрика, группирующая индивидуальные, но взаимосвязанные/взаимозависимые фабрики без указания для них конкретных классов.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Вернёмся к примеру с дверями из «Простой фабрики». В зависимости от своих потребностей вы можете купить деревянную дверь в одном магазине, стальную — в другом, пластиковую — в третьем. Для монтажа вам понадобятся разные специалисты: деревянной двери нужен плотник, стальной — сварщик, пластиковой — спец по ПВХ-профилям.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n<p>Это фабрика фабрик. То есть фабрика, группирующая индивидуальные, но взаимосвязанные/взаимозависимые фабрики без указания для них конкретных классов.</p>\r\n<p><b>Википедия</b></p>\r\n\r\n<p><blockquote>Шаблон «Абстрактная фабрика» описывает способ инкапсулирования группы индивидуальных фабрик, объединённых некой темой, без указания для них конкретных классов.</p></blockquote>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Создадим интерфейс Door и несколько реализаций для него.</p><p><pre>interface Door\r\n{\r\n    public function getDescription();\r\n}\r\n\r\nclass WoodenDoor implements Door\r\n{\r\n    public function getDescription()\r\n    {\r\n        echo \'I am a wooden door\';\r\n    }\r\n}\r\n\r\nclass IronDoor implements Door\r\n{\r\n    public function getDescription()\r\n    {\r\n        echo \'I am an iron door\';\r\n    }\r\n}</pre></p><p>Теперь нам нужны специалисты по установке каждого вида дверей.</p><p><pre>interface DoorFittingExpert\r\n{\r\n    public function getDescription();\r\n}\r\n\r\nclass Welder implements DoorFittingExpert\r\n{\r\n    public function getDescription()\r\n    {\r\n        echo \'I can only fit iron doors\';\r\n    }\r\n}\r\n\r\nclass Carpenter implements DoorFittingExpert\r\n{\r\n    public function getDescription()\r\n    {\r\n        echo \'I can only fit wooden doors\';\r\n    }\r\n}</pre></p><p>Мы получили абстрактную фабрику, которая позволяет создавать семейства объектов или взаимосвязанные объекты. То есть фабрика деревянных дверей создаст деревянную дверь и человека для её монтажа, фабрика стальных дверей — стальную дверь и соответствующего специалиста и т. д.</p><p><pre>interface DoorFactory\r\n{\r\n    public function makeDoor(): Door;\r\n    public function makeFittingExpert(): DoorFittingExpert;\r\n}\r\n\r\n// Фабрика деревянных дверей возвращает плотника и деревянную дверь\r\nclass WoodenDoorFactory implements DoorFactory\r\n{\r\n    public function makeDoor(): Door\r\n    {\r\n        return new WoodenDoor();\r\n    }\r\n\r\n    public function makeFittingExpert(): DoorFittingExpert\r\n    {\r\n        return new Carpenter();\r\n    }\r\n}\r\n\r\n// Фабрика стальных дверей возвращает стальную дверь и сварщика\r\nclass IronDoorFactory implements DoorFactory\r\n{\r\n    public function makeDoor(): Door\r\n    {\r\n        return new IronDoor();\r\n    }\r\n\r\n    public function makeFittingExpert(): DoorFittingExpert\r\n    {\r\n        return new Welder();\r\n    }\r\n}</pre></p><p><b>Использование:</b></p><p><pre>$woodenFactory = new WoodenDoorFactory();\r\n\r\n$door = $woodenFactory->makeDoor();\r\n$expert = $woodenFactory->makeFittingExpert();\r\n\r\n$door->getDescription();  // Output: Я деревянная дверь\r\n$expert->getDescription(); // Output: Я могу устанавливать только деревянные двери\r\n\r\n// Same for Iron Factory\r\n$ironFactory = new IronDoorFactory();\r\n\r\n$door = $ironFactory->makeDoor();\r\n$expert = $ironFactory->makeFittingExpert();\r\n\r\n$door->getDescription();  // Output: Я стальная дверь\r\n$expert->getDescription(); // Output: Я могу устанавливать только стальные двери</pre></p><p>Здесь фабрика деревянных дверей инкапсулировала carpenter и wooden door, фабрика стальных дверей — iron door and welder. То есть можно быть уверенными, что для каждой из созданных дверей мы получим правильного специалиста.</p>\r\n\r\n<p><b>Когда использовать?</b></p>\r\n\r\n<p>Когда у вас есть взаимосвязи с не самой простой логикой создания (creation logic).</p>', 3, 4, 434234234, 'Это фабрика фабрик. То есть фабрика, группирующая индивидуальные, но взаимосвязанные/взаимозависимые фабрики без указания для них конкретных классов.', 'Абстрактная фабрика, фабрика'),
(10, 'Строитель', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, вы пришли в забегаловку, заказали бургер дня, и вам выдали его <b>без вопросов</b>. Это пример «Простой фабрики». Но иногда логика создания состоит из большего количества шагов. К примеру, при заказе бургера дня есть несколько вариантов хлеба, начинки, соусов, дополнительных ингредиентов. В таких ситуациях помогает шаблон «Строитель».</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон позволяет создавать разные свойства объекта, избегая загрязнения конструктора (constructor pollution). Это полезно, когда у объекта может быть несколько свойств. Или когда создание объекта состоит из большого количества этапов.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, вы пришли в забегаловку, заказали бургер дня, и вам выдали его <b>без вопросов</b>. Это пример «Простой фабрики». Но иногда логика создания состоит из большего количества шагов. К примеру, при заказе бургера дня есть несколько вариантов хлеба, начинки, соусов, дополнительных ингредиентов. В таких ситуациях помогает шаблон «Строитель».</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон позволяет создавать разные свойства объекта, избегая загрязнения конструктора (constructor pollution). Это полезно, когда у объекта может быть несколько свойств. Или когда создание объекта состоит из большого количества этапов.</p<p><b>>Википедия</b></p>\r\n\r\n<p><blockquote>Шаблон «Строитель» предназначен для поиска решения проблемы антипаттерна Telescoping constructor.</blockquote></p>\r\n<p>Поясню, что такое антипаттерн Telescoping constructor. Каждый из нас когда-либо сталкивался с подобным конструктором:</p><p><pre>public function __construct($size, $cheese = true, $pepperoni = true, $tomato = false, $lettuce = true)\r\n{\r\n}</pre></p><p>Как видите, количество параметров может быстро разрастись, и станет трудно разобраться в их структуре. Кроме того, этот список параметров будет расти и дальше, если в будущем вы захотите добавить новые опции. Это и есть антипаттерн Telescoping constructor.</p>\r\n\r\n<p><b>Пример</b></p>\r\n\r\n<p>Разумная альтернатива — шаблон «Строитель». Сначала создадим бургер:</p><p><pre>class Burger\r\n{\r\n    protected $size;\r\n\r\n    protected $cheese = false;\r\n    protected $pepperoni = false;\r\n    protected $lettuce = false;\r\n    protected $tomato = false;\r\n\r\n    public function __construct(BurgerBuilder $builder)\r\n    {\r\n        $this->size = $builder->size;\r\n        $this->cheese = $builder->cheese;\r\n        $this->pepperoni = $builder->pepperoni;\r\n        $this->lettuce = $builder->lettuce;\r\n        $this->tomato = $builder->tomato;\r\n    }\r\n}</pre></p><p>А затем добавим «строителя»:</p><p><pre>class BurgerBuilder\r\n{\r\n    public $size;\r\n\r\n    public $cheese = false;\r\n    public $pepperoni = false;\r\n    public $lettuce = false;\r\n    public $tomato = false;\r\n\r\n    public function __construct(int $size)\r\n    {\r\n        $this->size = $size;\r\n    }\r\n\r\n    public function addPepperoni()\r\n    {\r\n        $this->pepperoni = true;\r\n        return $this;\r\n    }\r\n\r\n    public function addLettuce()\r\n    {\r\n        $this->lettuce = true;\r\n        return $this;\r\n    }\r\n\r\n    public function addCheese()\r\n    {\r\n        $this->cheese = true;\r\n        return $this;\r\n    }\r\n\r\n    public function addTomato()\r\n    {\r\n        $this->tomato = true;\r\n        return $this;\r\n    }\r\n\r\n    public function build(): Burger\r\n    {\r\n        return new Burger($this);\r\n    }\r\n}</pre></p><p>Использование:</p><p><pre>$burger = (new BurgerBuilder(14))\r\n                    ->addPepperoni()\r\n                    ->addLettuce()\r\n                    ->addTomato()\r\n                    ->build();</pre></p>\r\n<p><b>Когда использовать?</b></p>\r\n\r\n<p>Когда у объекта может быть несколько свойств и когда нужно избежать Telescoping constructor. Ключевое отличие от шаблона «Простая фабрика»: он используется в одноэтапном создании, а «Строитель» — в многоэтапном.</p>\r\n', 3, 4, 543544354, 'Шаблон позволяет создавать разные свойства объекта, избегая загрязнения конструктора (constructor pollution). Это полезно, когда у объекта может быть несколько свойств. Или когда создание объекта состоит из большого количества этапов.', 'Строитель');
INSERT INTO `xyz_articles` (`id`, `title`, `img`, `intro`, `full`, `section_id`, `cat_id`, `date`, `meta_desc`, `meta_key`) VALUES
(11, 'Прототип', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Помните клонированную овечку Долли? Так вот, этот шаблон проектирования как раз посвящён клонированию.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Объект создаётся посредством клонирования существующего объекта.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Помните клонированную овечку Долли? Так вот, этот шаблон проектирования как раз посвящён клонированию.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Объект создаётся посредством клонирования существующего объекта.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>Шаблон «Прототип» используется, когда типы создаваемых объектов определяются экземпляром-прототипом, клонированным для создания новых объектов.</blockquote></p>\r\n<p>То есть шаблон позволяет дублировать существующий объект и модифицировать копию в соответствии с потребностями. Без заморочек с созданием объекта с нуля и его настройкой.</p>\r\n\r\n<p><b>Пример</b></p>\r\n\r\n<p>В PHP это легко можно сделать с помощью clone:</p><p><pre>class Sheep\r\n{\r\n    protected $name;\r\n    protected $category;\r\n\r\n    public function __construct(string $name, string $category = \'Mountain Sheep\')\r\n    {\r\n        $this->name = $name;\r\n        $this->category = $category;\r\n    }\r\n\r\n    public function setName(string $name)\r\n    {\r\n        $this->name = $name;\r\n    }\r\n\r\n    public function getName()\r\n    {\r\n        return $this->name;\r\n    }\r\n\r\n    public function setCategory(string $category)\r\n    {\r\n        $this->category = $category;\r\n    }\r\n\r\n    public function getCategory()\r\n    {\r\n        return $this->category;\r\n    }\r\n}</pre></p>\r\n\r\n<p>Затем можно клонировать так:</p>\r\n\r\n<p><pre>$original = new Sheep(\'Jolly\');\r\necho $original->getName(); // Джолли\r\necho $original->getCategory(); // Горная овечка\r\n\r\n// Клонируйте и модифицируйте, что нужно\r\n$cloned = clone $original;\r\n$cloned->setName(\'Dolly\');\r\necho $cloned->getName(); // Долли\r\necho $cloned->getCategory(); // Горная овечка</pre></p>\r\n\r\n<p>Также для модификации процедуры клонирования можно обратиться к магическому методу __clone.</p>\r\n\r\n<p><b>Когда использовать?</b></p>\r\n\r\n<p>Когда необходимый объект аналогичен уже существующему или когда создание с нуля дороже клонирования.</p>', 3, 4, 434343243, 'Объект создаётся посредством клонирования существующего объекта.', 'Прототип'),
(12, 'Одиночка', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>У страны может быть только один президент. Он должен действовать, когда того требуют обстоятельства и долг. В данном случае президент — одиночка.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон позволяет удостовериться, что создаваемый объект — единственный в своём классе.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>У страны может быть только один президент. Он должен действовать, когда того требуют обстоятельства и долг. В данном случае президент — одиночка.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон позволяет удостовериться, что создаваемый объект — единственный в своём классе.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>Шаблон «Одиночка» позволяет ограничивать создание класса единственным объектом. Это удобно, когда для координации действий в рамках системы требуется, чтобы объект был единственным в своём классе.</blockquote></p>\r\n<p>На самом деле шаблон «Одиночка» считается антипаттерном, не следует им слишком увлекаться. Он необязательно плох и иногда бывает полезен. Но применяйте его с осторожностью, потому что «Одиночка» вносит в приложение глобальное состояние, так что изменение в одном месте может повлиять на все остальные случаи использования, а отлаживать такое — не самое простое занятие. Другие недостатки шаблона: он делает ваш код сильно связанным (tightly coupled), а создание прототипа (mocking) «Одиночки» может быть затруднено.</p>\r\n\r\n<p><b>Пример</b></p>\r\n\r\n<p>Сделайте конструктор приватным, отключите расширения и создайте статическую переменную для хранения экземпляра:</p><p><pre>final class President\r\n{\r\n    private static $instance;\r\n\r\n    private function __construct()\r\n    {\r\n        // Прячем конструктор\r\n    }\r\n\r\n    public static function getInstance(): President\r\n    {\r\n        if (!self::$instance) {\r\n            self::$instance = new self();\r\n        }\r\n\r\n        return self::$instance;\r\n    }\r\n\r\n    private function __clone()\r\n    {\r\n        // Отключаем клонирование\r\n    }\r\n\r\n    private function __wakeup()\r\n    {\r\n        // Отключаем десериализацию\r\n    }\r\n}</pre></p>\r\n\r\n<p><b>Использование:</b></p>\r\n\r\n<p><pre>$president1 = President::getInstance();\r\n$president2 = President::getInstance();\r\n\r\nvar_dump($president1 === $president2); // true</pre></p>', 3, 4, 423432442, 'Шаблон позволяет удостовериться, что создаваемый объект — единственный в своём классе.', 'Одиночка'),
(13, 'Адаптер', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, у вас на карте памяти есть какие-то картинки. Их нужно перенести на компьютер. Нужен адаптер, совместимый с входным портом компьютера, в который можно вставить карту памяти. В данном примере адаптер — это картридер. Ещё один пример: переходник, позволяющий использовать американский блок питания с российской розеткой. Третий пример: переводчик — это адаптер, соединяющий двух людей, говорящих на разных языках.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Адаптер» позволяет помещать несовместимый объект в обёртку, чтобы он оказался совместимым с другим классом.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, у вас на карте памяти есть какие-то картинки. Их нужно перенести на компьютер. Нужен адаптер, совместимый с входным портом компьютера, в который можно вставить карту памяти. В данном примере адаптер — это картридер. Ещё один пример: переходник, позволяющий использовать американский блок питания с российской розеткой. Третий пример: переводчик — это адаптер, соединяющий двух людей, говорящих на разных языках.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Адаптер» позволяет помещать несовместимый объект в обёртку, чтобы он оказался совместимым с другим классом.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>Шаблон проектирования «Адаптер» позволяет использовать интерфейс существующего класса как другой интерфейс. Этот шаблон часто применяется для обеспечения работы одних классов с другими без изменения их исходного кода.</blockquote></p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Представим себе охотника на львов</p>.\r\n\r\n<p>Создадим интерфейс Lion, который реализует все типы львов.</p>\r\n\r\n<p><pre>interface Lion\r\n{\r\n    public function roar();\r\n}\r\n\r\nclass AfricanLion implements Lion\r\n{\r\n    public function roar()\r\n    {\r\n    }\r\n}\r\n\r\nclass AsianLion implements Lion\r\n{\r\n    public function roar()\r\n    {\r\n    }\r\n}</pre></p>\r\n\r\n<p>Охотник должен охотиться на все реализации интерфейса Lion.</p>\r\n\r\n<p><pre>class Hunter\r\n{\r\n    public function hunt(Lion $lion)\r\n    {\r\n    }\r\n}</pre></p>\r\n\r\n<p>Добавим теперь дикую собаку WildDog, на которую охотник тоже может охотиться. Но у нас не получится сделать это напрямую, потому что у собаки другой интерфейс. Чтобы она стала совместима с охотником, нужно создать подходящий адаптер.</p>\r\n\r\n<p><pre>// Это нужно добавить\r\nclass WildDog\r\n{\r\n    public function bark()\r\n    {\r\n    }\r\n}\r\n\r\n// Адаптер вокруг собаки сделает её совместимой с охотником\r\nclass WildDogAdapter implements Lion\r\n{\r\n    protected $dog;\r\n\r\n    public function __construct(WildDog $dog)\r\n    {\r\n        $this->dog = $dog;\r\n    }\r\n\r\n    public function roar()\r\n    {\r\n        $this->dog->bark();\r\n    }\r\n}</pre></p>\r\n\r\n<p>Теперь WildDog может вступить в игру действие благодаря WildDogAdapter.</p>\r\n\r\n<p><pre>$wildDog = new WildDog();\r\n$wildDogAdapter = new WildDogAdapter($wildDog);\r\n\r\n$hunter = new Hunter();\r\n$hunter->hunt($wildDogAdapter);</pre></p>\r\n', 3, 5, 434324356, '', ''),
(14, ' Мост', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, у вас есть сайт с несколькими страницами. Вы хотите позволить пользователям менять темы оформления страниц. Как бы вы поступили? Создали множественные копии каждой страницы для каждой темы или просто сделали отдельные темы и подгружали их в соответствии с настройками пользователей? Шаблон «Мост» позволяет реализовать второй подход.</p><p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Мост» — это предпочтение компоновки наследованию. Подробности реализации передаются из одной иерархии другому объекту с отдельной иерархией.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, у вас есть сайт с несколькими страницами. Вы хотите позволить пользователям менять темы оформления страниц. Как бы вы поступили? Создали множественные копии каждой страницы для каждой темы или просто сделали отдельные темы и подгружали их в соответствии с настройками пользователей? Шаблон «Мост» позволяет реализовать второй подход.</p><p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Мост» — это предпочтение компоновки наследованию. Подробности реализации передаются из одной иерархии другому объекту с отдельной иерархией.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>Шаблон «Мост» означает отделение абстракции от реализации, чтобы их обе можно было изменять независимо друг от друга.</blockquote></p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Реализуем вышеописанный пример с веб-страницами. Сделаем иерархию WebPage:</p><p><pre>interface WebPage\r\n{\r\n    public function __construct(Theme $theme);\r\n    public function getContent();\r\n}\r\n\r\nclass About implements WebPage\r\n{\r\n    protected $theme;\r\n\r\n    public function __construct(Theme $theme)\r\n    {\r\n        $this->theme = $theme;\r\n    }\r\n\r\n    public function getContent()\r\n    {\r\n        return \"About page in \" . $this->theme->getColor();\r\n    }\r\n}\r\n\r\nclass Careers implements WebPage\r\n{\r\n    protected $theme;\r\n\r\n    public function __construct(Theme $theme)\r\n    {\r\n        $this->theme = $theme;\r\n    }\r\n\r\n    public function getContent()\r\n    {\r\n        return \"Careers page in \" . $this->theme->getColor();\r\n    }\r\n}</pre></p>\r\n\r\n<p>Отделим иерархию тем:</p>\r\n\r\n<p><pre>interface Theme\r\n{\r\n    public function getColor();\r\n}\r\n\r\nclass DarkTheme implements Theme\r\n{\r\n    public function getColor()\r\n    {\r\n        return \'Dark Black\';\r\n    }\r\n}\r\nclass LightTheme implements Theme\r\n{\r\n    public function getColor()\r\n    {\r\n        return \'Off white\';\r\n    }\r\n}\r\nclass AquaTheme implements Theme\r\n{\r\n    public function getColor()\r\n    {\r\n        return \'Light blue\';\r\n    }\r\n}</pre></p>\r\n\r\n<p>Обе иерархии:</p>\r\n\r\n<p><pre>$darkTheme = new DarkTheme();\r\n\r\n$about = new About($darkTheme);\r\n$careers = new Careers($darkTheme);\r\n\r\necho $about->getContent(); // \"About page in Dark Black\";\r\necho $careers->getContent(); // \"Careers page in Dark Black\";</pre></p>', 3, 5, 878678667, '', ''),
(15, 'Компоновщик', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Каждая компания состоит из сотрудников. У каждого сотрудника есть одни и те же свойства: зарплата, обязанности, отчётность перед кем-то, субординация...</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Компоновщик» позволяет клиентам обрабатывать отдельные объекты в едином порядке.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Каждая компания состоит из сотрудников. У каждого сотрудника есть одни и те же свойства: зарплата, обязанности, отчётность перед кем-то, субординация...</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Компоновщик» позволяет клиентам обрабатывать отдельные объекты в едином порядке.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>Шаблон «Компоновщик» описывает общий порядок обработки группы объектов, словно это одиночный экземпляр объекта. Суть шаблона — компонование объектов в древовидную структуру для представления иерархии от частного к целому. Шаблон позволяет клиентам одинаково обращаться к отдельным объектам и к группам объектов.</blockquote></p>\r\n<p><b>Пример</b></p>\r\n<p>Вот разные типы сотрудников:</p><p><pre>interface Employee\r\n{\r\n    public function __construct(string $name, float $salary);\r\n    public function getName(): string;\r\n    public function setSalary(float $salary);\r\n    public function getSalary(): float;\r\n    public function getRoles(): array;\r\n}\r\n\r\nclass Developer implements Employee\r\n{\r\n    protected $salary;\r\n    protected $name;\r\n\r\n    public function __construct(string $name, float $salary)\r\n    {\r\n        $this->name = $name;\r\n        $this->salary = $salary;\r\n    }\r\n\r\n    public function getName(): string\r\n    {\r\n        return $this->name;\r\n    }\r\n\r\n    public function setSalary(float $salary)\r\n    {\r\n        $this->salary = $salary;\r\n    }\r\n\r\n    public function getSalary(): float\r\n    {\r\n        return $this->salary;\r\n    }\r\n\r\n    public function getRoles(): array\r\n    {\r\n        return $this->roles;\r\n    }\r\n}\r\n\r\nclass Designer implements Employee\r\n{\r\n    protected $salary;\r\n    protected $name;\r\n\r\n    public function __construct(string $name, float $salary)\r\n    {\r\n        $this->name = $name;\r\n        $this->salary = $salary;\r\n    }\r\n\r\n    public function getName(): string\r\n    {\r\n        return $this->name;\r\n    }\r\n\r\n    public function setSalary(float $salary)\r\n    {\r\n        $this->salary = $salary;\r\n    }\r\n\r\n    public function getSalary(): float\r\n    {\r\n        return $this->salary;\r\n    }\r\n\r\n    public function getRoles(): array\r\n    {\r\n        return $this->roles;\r\n    }\r\n}</pre></p>\r\n\r\n<p>А вот компания, которая состоит из сотрудников разных типов:</p>\r\n\r\n<p><pre>class Organization\r\n{\r\n    protected $employees;\r\n\r\n    public function addEmployee(Employee $employee)\r\n    {\r\n        $this->employees[] = $employee;\r\n    }\r\n\r\n    public function getNetSalaries(): float\r\n    {\r\n        $netSalary = 0;\r\n\r\n        foreach ($this->employees as $employee) {\r\n            $netSalary += $employee->getSalary();\r\n        }\r\n\r\n        return $netSalary;\r\n    }\r\n}</pre></p>\r\n\r\n<p><b>Использование:</b></p>\r\n\r\n<p><pre>// Подготовка сотрудников\r\n$john = new Developer(\'John Doe\', 12000);\r\n$jane = new Designer(\'Jane Doe\', 15000);\r\n\r\n// Включение их в штат\r\n$organization = new Organization();\r\n$organization->addEmployee($john);\r\n$organization->addEmployee($jane);\r\n\r\necho \"Net salaries: \" . $organization->getNetSalaries(); // Net Salaries: 27000</pre></p>', 3, 5, 765754673, '', ''),
(16, 'Декоратор', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, у вас свой автосервис, оказывающий различные услуги. Как выставлять клиентам счёт? Добавлять последовательно услуги и их стоимость — и в конце концов получится итоговая сумма к оплате. Здесь каждый тип услуги — это «декоратор».<p>\r\n</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Декоратор» позволяет во время выполнения динамически изменять поведение объекта, обёртывая его в объект класса «декоратора».<p>\r\n</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, у вас свой автосервис, оказывающий различные услуги. Как выставлять клиентам счёт? Добавлять последовательно услуги и их стоимость — и в конце концов получится итоговая сумма к оплате. Здесь каждый тип услуги — это «декоратор».<p>\r\n</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Декоратор» позволяет во время выполнения динамически изменять поведение объекта, обёртывая его в объект класса «декоратора».<p>\r\n</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>Шаблон «Декоратор» позволяет подключать к объекту дополнительное поведение (статически или динамически), не влияя на поведение других объектов того же класса. Шаблон часто используется для соблюдения принципа единственной обязанности (Single Responsibility Principle), поскольку позволяет разделить функциональность между классами для решения конкретных задач.</blockquote></p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Возьмём в качестве примера кофе. Сначала просто реализуем интерфейс:</p><p><pre>interface Coffee\r\n{\r\n    public function getCost();\r\n    public function getDescription();\r\n}\r\n\r\nclass SimpleCoffee implements Coffee\r\n{\r\n    public function getCost()\r\n    {\r\n        return 10;\r\n    }\r\n\r\n    public function getDescription()\r\n    {\r\n        return \'Simple coffee\';\r\n    }\r\n}</pre></p>\r\n\r\n<p>Можно сделать код расширяемым, чтобы при необходимости вносить модификации. Добавим «декораторы»:</p>\r\n\r\n<p><pre>class MilkCoffee implements Coffee\r\n{\r\n    protected $coffee;\r\n\r\n    public function __construct(Coffee $coffee)\r\n    {\r\n        $this->coffee = $coffee;\r\n    }\r\n\r\n    public function getCost()\r\n    {\r\n        return $this->coffee->getCost() + 2;\r\n    }\r\n\r\n    public function getDescription()\r\n    {\r\n        return $this->coffee->getDescription() . \', milk\';\r\n    }\r\n}\r\n\r\nclass WhipCoffee implements Coffee\r\n{\r\n    protected $coffee;\r\n\r\n    public function __construct(Coffee $coffee)\r\n    {\r\n        $this->coffee = $coffee;\r\n    }\r\n\r\n    public function getCost()\r\n    {\r\n        return $this->coffee->getCost() + 5;\r\n    }\r\n\r\n    public function getDescription()\r\n    {\r\n        return $this->coffee->getDescription() . \', whip\';\r\n    }\r\n}\r\n\r\nclass VanillaCoffee implements Coffee\r\n{\r\n    protected $coffee;\r\n\r\n    public function __construct(Coffee $coffee)\r\n    {\r\n        $this->coffee = $coffee;\r\n    }\r\n\r\n    public function getCost()\r\n    {\r\n        return $this->coffee->getCost() + 3;\r\n    }\r\n\r\n    public function getDescription()\r\n    {\r\n        return $this->coffee->getDescription() . \', vanilla\';\r\n    }\r\n}</pre></p>\r\n\r\n<p>Теперь приготовим кофе:</p>\r\n\r\n<p><pre>$someCoffee = new SimpleCoffee();\r\necho $someCoffee->getCost(); // 10\r\necho $someCoffee->getDescription(); // Simple Coffee\r\n\r\n$someCoffee = new MilkCoffee($someCoffee);\r\necho $someCoffee->getCost(); // 12\r\necho $someCoffee->getDescription(); // Simple Coffee, milk\r\n\r\n$someCoffee = new WhipCoffee($someCoffee);\r\necho $someCoffee->getCost(); // 17\r\necho $someCoffee->getDescription(); // Simple Coffee, milk, whip\r\n\r\n$someCoffee = new VanillaCoffee($someCoffee);\r\necho $someCoffee->getCost(); // 20\r\necho $someCoffee->getDescription(); // Simple Coffee, milk, whip, vanilla</pre></p>', 3, 5, 757657675, '', ''),
(17, 'Фасад\r\n', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Как включить компьютер? Вы скажете: «Нажать кнопку включения». Это потому, что вы используете простой интерфейс, предоставляемый компьютером наружу. А внутри него происходит очень много процессов. Простой интерфейс для сложной подсистемы — это фасад.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Фасад» предоставляет упрощённый интерфейс для сложной подсистемы.</p>\r\n', '<p><b>Аналогия</b></p>\r\n\r\n<p>Как включить компьютер? Вы скажете: «Нажать кнопку включения». Это потому, что вы используете простой интерфейс, предоставляемый компьютером наружу. А внутри него происходит очень много процессов. Простой интерфейс для сложной подсистемы — это фасад.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Фасад» предоставляет упрощённый интерфейс для сложной подсистемы.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>«Фасад» — это объект, предоставляющий упрощённый интерфейс для более крупного тела кода, например библиотеки классов.</blockquote></p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Создадим класс computer:</p>\r\n\r\n<p><pre>class Computer\r\n{\r\n    public function getElectricShock()\r\n    {\r\n        echo \"Ouch!\";\r\n    }\r\n\r\n    public function makeSound()\r\n    {\r\n        echo \"Beep beep!\";\r\n    }\r\n\r\n    public function showLoadingScreen()\r\n    {\r\n        echo \"Loading..\";\r\n    }\r\n\r\n    public function bam()\r\n    {\r\n        echo \"Ready to be used!\";\r\n    }\r\n\r\n    public function closeEverything()\r\n    {\r\n        echo \"Bup bup bup buzzzz!\";\r\n    }\r\n\r\n    public function sooth()\r\n    {\r\n        echo \"Zzzzz\";\r\n    }\r\n\r\n    public function pullCurrent()\r\n    {\r\n        echo \"Haaah!\";\r\n    }\r\n}</pre></p>\r\n\r\n\r\nТеперь «фасад»:</p>\r\n\r\n<p><pre>class ComputerFacade\r\n{\r\n    protected $computer;\r\n\r\n    public function __construct(Computer $computer)\r\n    {\r\n        $this->computer = $computer;\r\n    }\r\n\r\n    public function turnOn()\r\n    {\r\n        $this->computer->getElectricShock();\r\n        $this->computer->makeSound();\r\n        $this->computer->showLoadingScreen();\r\n        $this->computer->bam();\r\n    }\r\n\r\n    public function turnOff()\r\n    {\r\n        $this->computer->closeEverything();\r\n        $this->computer->pullCurrent();\r\n        $this->computer->sooth();\r\n    }\r\n}</pre></p>\r\n\r\n<p><b>Использование:</b></p>\r\n\r\n<p><pre>$computer = new ComputerFacade(new Computer());\r\n$computer->turnOn(); // Ouch! Beep beep! Loading.. Ready to be used!\r\n$computer->turnOff(); // Bup bup buzzz! Haah! Zzzzz</pre></p>', 3, 5, 776756554, '', ''),
(18, 'Приспособленец', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Обычно в заведениях общепита чай заваривают не отдельно для каждого клиента, а сразу в некой крупной ёмкости. Это позволяет экономить ресурсы: газ/электричество, время и т. д. Шаблон «Приспособленец» как раз посвящён общему использованию (sharing).</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон применяется для минимизирования использования памяти или вычислительной стоимости за счёт общего использования как можно большего количества одинаковых объектов.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Обычно в заведениях общепита чай заваривают не отдельно для каждого клиента, а сразу в некой крупной ёмкости. Это позволяет экономить ресурсы: газ/электричество, время и т. д. Шаблон «Приспособленец» как раз посвящён общему использованию (sharing).</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон применяется для минимизирования использования памяти или вычислительной стоимости за счёт общего использования как можно большего количества одинаковых объектов.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>«Приспособленец» — это объект, минимизирующий использование памяти за счёт общего с другими, такими же объектами использования как можно большего объёма данных. Это способ применения многочисленных объектов, когда простое повторяющееся представление приведёт к неприемлемому потреблению памяти.</blockquote></p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Сделаем типы чая и чайника.</p>\r\n\r\n<p><pre>// Приспособленец — то, что будет закешировано.\r\n// Типы чая здесь — приспособленцы.\r\nclass KarakTea\r\n{\r\n}\r\n\r\n// Действует как фабрика и экономит чай\r\nclass TeaMaker\r\n{\r\n    protected $availableTea = [];\r\n\r\n    public function make($preference)\r\n    {\r\n        if (empty($this->availableTea[$preference])) {\r\n            $this->availableTea[$preference] = new KarakTea();\r\n        }\r\n\r\n        return $this->availableTea[$preference];\r\n    }\r\n}</pre></p>\r\n\r\n<p>Сделаем забегаловку TeaShop, принимающую и обрабатывающую заказы:</p>\r\n\r\n<p><pre>class TeaShop\r\n{\r\n    protected $orders;\r\n    protected $teaMaker;\r\n\r\n    public function __construct(TeaMaker $teaMaker)\r\n    {\r\n        $this->teaMaker = $teaMaker;\r\n    }\r\n\r\n    public function takeOrder(string $teaType, int $table)\r\n    {\r\n        $this->orders[$table] = $this->teaMaker->make($teaType);\r\n    }\r\n\r\n    public function serve()\r\n    {\r\n        foreach ($this->orders as $table => $tea) {\r\n            echo \"Serving tea to table# \" . $table;\r\n        }\r\n    }\r\n}</pre></p>\r\n\r\n<p><b>Использование:</b></p>\r\n\r\n<p><pre>$teaMaker = new TeaMaker();\r\n$shop = new TeaShop($teaMaker);\r\n\r\n$shop->takeOrder(\'less sugar\', 1);\r\n$shop->takeOrder(\'more milk\', 2);\r\n$shop->takeOrder(\'without sugar\', 5);\r\n\r\n$shop->serve();\r\n// Serving tea to table# 1\r\n// Serving tea to table# 2\r\n// Serving tea to table# 5</pre></p>', 3, 5, 756775677, '', ''),
(19, 'Заместитель', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Открыть дверь с электронным замком можно с помощью карточки доступа (access card) или кнопки для обхода системы безопасности. То есть основная функциональность двери — открыться, а поверх неё может быть ещё какая-то функциональность — «заместитель».</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>С помощью шаблона «Заместитель» класс представляет функциональность другого класса.</p>\r\n', '<p><b>Аналогия</b></p>\r\n\r\n<p>Открыть дверь с электронным замком можно с помощью карточки доступа (access card) или кнопки для обхода системы безопасности. То есть основная функциональность двери — открыться, а поверх неё может быть ещё какая-то функциональность — «заместитель».</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>С помощью шаблона «Заместитель» класс представляет функциональность другого класса.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>В наиболее общей форме «Заместитель» — это класс, функционирующий как интерфейс к чему-либо. Это оболочка или объект-агент, вызываемый клиентом для получения доступа к другому, «настоящему» объекту. «Заместитель» может просто переадресовывать запросы настоящему объекту, а может предоставлять дополнительную логику: кеширование данных при интенсивном выполнении операций или потреблении ресурсов настоящим объектом; проверка предварительных условий (preconditions) до вызова выполнения операций настоящим объектом.</blockquote></p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Реализуем интерфейс двери и саму дверь:</p>\r\n\r\n<p><pre>interface Door\r\n{\r\n    public function open();\r\n    public function close();\r\n}\r\n\r\nclass LabDoor implements Door\r\n{\r\n    public function open()\r\n    {\r\n        echo \"Opening lab door\";\r\n    }\r\n\r\n    public function close()\r\n    {\r\n        echo \"Closing the lab door\";\r\n    }\r\n}</pre></p>\r\n\r\n<p>Сделаем «заместителя», чтобы дверь могла выполнять защитную функцию:</p>\r\n\r\n<p><pre>class Security\r\n{\r\n    protected $door;\r\n\r\n    public function __construct(Door $door)\r\n    {\r\n        $this->door = $door;\r\n    }\r\n\r\n    public function open($password)\r\n    {\r\n        if ($this->authenticate($password)) {\r\n            $this->door->open();\r\n        } else {\r\n            echo \"Big no! It ain\'t possible.\";\r\n        }\r\n    }\r\n\r\n    public function authenticate($password)\r\n    {\r\n        return $password === \'$ecr@t\';\r\n    }\r\n\r\n    public function close()\r\n    {\r\n        $this->door->close();\r\n    }\r\n}</pre></p>\r\n\r\n<p><b>Использование:</b></p>\r\n\r\n<p><pre>$door = new Security(new LabDoor());\r\n$door->open(\'invalid\'); // Big no! It ain\'t possible.\r\n\r\n$door->open(\'$ecr@t\'); // Opening lab door\r\n$door->close(); // Closing lab door</pre></p>\r\n', 3, 5, 657676533, '', ''),
(20, 'Цепочка ответственности', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, для вашего банковского счёта доступны три способа оплаты (A, B и C). Каждый подразумевает разные доступные суммы денег: A — 100 долларов, B — 300, C — 1000. Приоритетность способов при оплате: А, затем В, затем С. Вы пытаетесь купить что-то за 210 долларов. На основании «цепочки ответственности» система попытается оплатить способом А. Если денег хватает — то оплата проходит, а цепочка прерывается. Если денег не хватает — то система переходит к способу В, и т. д.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Цепочка ответственности» позволяет создавать цепочки объектов. Запрос входит с одного конца цепочки и движется от объекта к объекту, пока не будет найден подходящий обработчик.</p>\r\n', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, для вашего банковского счёта доступны три способа оплаты (A, B и C). Каждый подразумевает разные доступные суммы денег: A — 100 долларов, B — 300, C — 1000. Приоритетность способов при оплате: А, затем В, затем С. Вы пытаетесь купить что-то за 210 долларов. На основании «цепочки ответственности» система попытается оплатить способом А. Если денег хватает — то оплата проходит, а цепочка прерывается. Если денег не хватает — то система переходит к способу В, и т. д.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Цепочка ответственности» позволяет создавать цепочки объектов. Запрос входит с одного конца цепочки и движется от объекта к объекту, пока не будет найден подходящий обработчик.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>Шаблон «Цепочка ответственности» содержит исходный управляющий объект и ряд обрабатывающих объектов. Каждый обрабатывающий объект содержит логику, определяющую типы командных объектов, которые он может обрабатывать, а остальные передаются по цепочке следующему обрабатывающему объекту.</blockquote></p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Создадим основной банковский счёт, содержащий логику связывания счетов в цепочки, и сами счета.</p>\r\n\r\n<p><pre>abstract class Account\r\n{\r\n    protected $successor;\r\n    protected $balance;\r\n\r\n    public function setNext(Account $account)\r\n    {\r\n        $this->successor = $account;\r\n    }\r\n\r\n    public function pay(float $amountToPay)\r\n    {\r\n        if ($this->canPay($amountToPay)) {\r\n            echo sprintf(\'Paid %s using %s\' . PHP_EOL, $amountToPay, get_called_class());\r\n        } elseif ($this->successor) {\r\n            echo sprintf(\'Cannot pay using %s. Proceeding ..\' . PHP_EOL, get_called_class());\r\n            $this->successor->pay($amountToPay);\r\n        } else {\r\n            throw new Exception(\'None of the accounts have enough balance\');\r\n        }\r\n    }\r\n\r\n    public function canPay($amount): bool\r\n    {\r\n        return $this->balance >= $amount;\r\n    }\r\n}\r\n\r\nclass Bank extends Account\r\n{\r\n    protected $balance;\r\n\r\n    public function __construct(float $balance)\r\n    {\r\n        $this->balance = $balance;\r\n    }\r\n}\r\n\r\nclass Paypal extends Account\r\n{\r\n    protected $balance;\r\n\r\n    public function __construct(float $balance)\r\n    {\r\n        $this->balance = $balance;\r\n    }\r\n}\r\n\r\nclass Bitcoin extends Account\r\n{\r\n    protected $balance;\r\n\r\n    public function __construct(float $balance)\r\n    {\r\n        $this->balance = $balance;\r\n    }\r\n}</pre></p>\r\n\r\n<p>Теперь с помощью определённых выше линков (Bank, Paypal, Bitcoin) подготовим цепочку:</p>\r\n\r\n<p><pre>// Сделаем такую цепочку\r\n//      $bank->$paypal->$bitcoin\r\n//\r\n// Приоритет у банка\r\n//      Если банк не может оплатить, переходим к Paypal\r\n//      Если Paypal не может, переходим к Bitcoin\r\n\r\n$bank = new Bank(100);          // У банка баланс 100\r\n$paypal = new Paypal(200);      // У Paypal баланс 200\r\n$bitcoin = new Bitcoin(300);    // У Bitcoin баланс 300\r\n\r\n$bank->setNext($paypal);\r\n$paypal->setNext($bitcoin);\r\n\r\n// Начнём с банка\r\n$bank->pay(259);\r\n\r\n// Выходной вид\r\n// ==============\r\n// Нельзя оплатить с помощью банка. Обрабатываю...\r\n// Нельзя оплатить с помощью Paypal. Обрабатываю...\r\n// Оплачено 259 с помощью Bitcoin!</pre></p>', 3, 6, 654654237, '', ''),
(21, 'Команда', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Вы пришли в ресторан. Вы (Client) просите официанта (Invoker) принести блюда (Command). Официант перенаправляет запрос шеф-повару (Receiver), который знает, что и как готовить. Другой пример: вы (Client) включаете (Command) телевизор (Receiver) с помощью пульта (Invoker).</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Команда» позволяет инкапсулировать действия в объекты. Ключевая идея — предоставить средства отделения клиента от получателя.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Вы пришли в ресторан. Вы (Client) просите официанта (Invoker) принести блюда (Command). Официант перенаправляет запрос шеф-повару (Receiver), который знает, что и как готовить. Другой пример: вы (Client) включаете (Command) телевизор (Receiver) с помощью пульта (Invoker).</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Команда» позволяет инкапсулировать действия в объекты. Ключевая идея — предоставить средства отделения клиента от получателя.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>В шаблоне «Команда» объект используется для инкапсуляции всей информации, необходимой для выполнения действия либо для его инициирования позднее. Информация включает в себя имя метода; объект, владеющий методом; значения параметров метода.</blockquote></p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Сначала сделаем получателя, содержащего реализации каждого действия, которое может быть выполнено.</p>\r\n\r\n<p><pre>// Receiver\r\nclass Bulb\r\n{\r\n    public function turnOn()\r\n    {\r\n        echo \"Bulb has been lit\";\r\n    }\r\n\r\n    public function turnOff()\r\n    {\r\n        echo \"Darkness!\";\r\n    }\r\n}</pre></p>\r\n\r\n<p>Теперь сделаем интерфейс, который будет реализовывать каждая команда. Также сделаем набор команд.</p>\r\n\r\n<p><pre>interface Command\r\n{\r\n    public function execute();\r\n    public function undo();\r\n    public function redo();\r\n}\r\n\r\n// Command\r\nclass TurnOn implements Command\r\n{\r\n    protected $bulb;\r\n\r\n    public function __construct(Bulb $bulb)\r\n    {\r\n        $this->bulb = $bulb;\r\n    }\r\n\r\n    public function execute()\r\n    {\r\n        $this->bulb->turnOn();\r\n    }\r\n\r\n    public function undo()\r\n    {\r\n        $this->bulb->turnOff();\r\n    }\r\n\r\n    public function redo()\r\n    {\r\n        $this->execute();\r\n    }\r\n}\r\n\r\nclass TurnOff implements Command\r\n{\r\n    protected $bulb;\r\n\r\n    public function __construct(Bulb $bulb)\r\n    {\r\n        $this->bulb = $bulb;\r\n    }\r\n\r\n    public function execute()\r\n    {\r\n        $this->bulb->turnOff();\r\n    }\r\n\r\n    public function undo()\r\n    {\r\n        $this->bulb->turnOn();\r\n    }\r\n\r\n    public function redo()\r\n    {\r\n        $this->execute();\r\n    }\r\n}</pre></p>\r\n\r\n<p>Теперь сделаем вызывающего Invoker, с которым будет взаимодействовать клиент для обработки команд.</p>\r\n\r\n<p><pre>// Invoker\r\nclass RemoteControl\r\n{\r\n    public function submit(Command $command)\r\n    {\r\n        $command->execute();\r\n    }\r\n}</pre></p>\r\n\r\n<p>Посмотрим, как всё это может использовать клиент:</p>\r\n\r\n<p><pre>$bulb = new Bulb();\r\n\r\n$turnOn = new TurnOn($bulb);\r\n$turnOff = new TurnOff($bulb);\r\n\r\n$remote = new RemoteControl();\r\n$remote->submit($turnOn); // Лампочка зажглась!\r\n$remote->submit($turnOff); // Темнота!</pre></p>\r\n\r\n<p>Шаблон «Команда» можно использовать и для реализации системы на основе транзакций. То есть системы, в которой вы сохраняете историю команд по мере их выполнения. Если последняя команда выполнена успешно, то всё хорошо. В противном случае система итерирует по истории и делает undo для всех выполненных команд.</p>', 3, 6, 877678667, '', ''),
(22, 'Итератор', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Хороший пример — радиоприёмник. Вы начинаете с какой-то радиостанции, а затем перемещаетесь по станциям вперёд/назад. То есть устройство предоставляет интерфейс для итерирования по каналам.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон — это способ доступа к элементам объекта без раскрытия базового представления.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Хороший пример — радиоприёмник. Вы начинаете с какой-то радиостанции, а затем перемещаетесь по станциям вперёд/назад. То есть устройство предоставляет интерфейс для итерирования по каналам.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон — это способ доступа к элементам объекта без раскрытия базового представления.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>В этом шаблоне итератор используется для перемещения по контейнеру и обеспечения доступа к элементам контейнера. Шаблон подразумевает отделение алгоритмов от контейнера. В каких-то случаях алгоритмы, специфичные для этого контейнера, не могут быть отделены.</blockquote></p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>В PHP довольно легко реализовать этот шаблон с помощью стандартной библиотеки PHP. Сначала создадим радиостанцию RadioStation.</p>\r\n\r\n<p><pre>class RadioStation\r\n{\r\n    protected $frequency;\r\n\r\n    public function __construct(float $frequency)\r\n    {\r\n        $this->frequency = $frequency;\r\n    }\r\n\r\n    public function getFrequency(): float\r\n    {\r\n        return $this->frequency;\r\n    }\r\n}</pre></p>\r\n\r\n<p>Теперь создадим итератор:</p>\r\n\r\n<p><pre>use Countable;\r\nuse Iterator;\r\n\r\nclass StationList implements Countable, Iterator\r\n{\r\n    /** @var RadioStation[] $stations */\r\n    protected $stations = [];\r\n\r\n    /** @var int $counter */\r\n    protected $counter;\r\n\r\n    public function addStation(RadioStation $station)\r\n    {\r\n        $this->stations[] = $station;\r\n    }\r\n\r\n    public function removeStation(RadioStation $toRemove)\r\n    {\r\n        $toRemoveFrequency = $toRemove->getFrequency();\r\n        $this->stations = array_filter($this->stations, function (RadioStation $station) use ($toRemoveFrequency) {\r\n            return $station->getFrequency() !== $toRemoveFrequency;\r\n        });\r\n    }\r\n\r\n    public function count(): int\r\n    {\r\n        return count($this->stations);\r\n    }\r\n\r\n    public function current(): RadioStation\r\n    {\r\n        return $this->stations[$this->counter];\r\n    }\r\n\r\n    public function key()\r\n    {\r\n        return $this->counter;\r\n    }\r\n\r\n    public function next()\r\n    {\r\n        $this->counter++;\r\n    }\r\n\r\n    public function rewind()\r\n    {\r\n        $this->counter = 0;\r\n    }\r\n\r\n    public function valid(): bool\r\n    {\r\n        return isset($this->stations[$this->counter]);\r\n    }\r\n}</pre></p>\r\n\r\n<p><b>Использование:</b></p>\r\n\r\n<p><pre>$stationList = new StationList();\r\n\r\n$stationList->addStation(new RadioStation(89));\r\n$stationList->addStation(new RadioStation(101));\r\n$stationList->addStation(new RadioStation(102));\r\n$stationList->addStation(new RadioStation(103.2));\r\n\r\nforeach($stationList as $station) {\r\n    echo $station->getFrequency() . PHP_EOL;\r\n}\r\n\r\n$stationList->removeStation(new RadioStation(89)); // Will remove station 89</pre></p>', 3, 6, 787566723, '', ''),
(23, 'Посредник', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Когда вы говорите с кем-то по мобильнику, то между вами и собеседником находится мобильный оператор. То есть сигнал передаётся через него, а не напрямую. В данном примере оператор — посредник.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Посредник» подразумевает добавление стороннего объекта («посредника») для управления взаимодействием между двумя объектами («коллегами»). Шаблон помогает уменьшить связанность (coupling) классов, общающихся друг с другом, ведь теперь они не должны знать о реализациях своих собеседников.</p>\r\n', '<p><b>Аналогия</b></p>\r\n\r\n<p>Когда вы говорите с кем-то по мобильнику, то между вами и собеседником находится мобильный оператор. То есть сигнал передаётся через него, а не напрямую. В данном примере оператор — посредник.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Посредник» подразумевает добавление стороннего объекта («посредника») для управления взаимодействием между двумя объектами («коллегами»). Шаблон помогает уменьшить связанность (coupling) классов, общающихся друг с другом, ведь теперь они не должны знать о реализациях своих собеседников.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>Шаблон определяет объект, который инкапсулирует способ взаимодействия набора объектов.</blockquote></p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Простейший пример: чат («посредник»), в котором пользователи («коллеги») отправляют друг другу сообщения.</p>\r\n\r\n<p>Создадим «посредника»:</p>\r\n\r\n<p><pre>interface ChatRoomMediator \r\n{\r\n    public function showMessage(User $user, string $message);\r\n}\r\n\r\n// Посредник\r\nclass ChatRoom implements ChatRoomMediator\r\n{\r\n    public function showMessage(User $user, string $message)\r\n    {\r\n        $time = date(\'M d, y H:i\');\r\n        $sender = $user->getName();\r\n\r\n        echo $time . \'[\' . $sender . \']:\' . $message;\r\n    }\r\n}</pre></p>\r\n\r\n<p>Теперь создадим «коллег»:</p>\r\n\r\n<p><pre>class User {\r\n    protected $name;\r\n    protected $chatMediator;\r\n\r\n    public function __construct(string $name, ChatRoomMediator $chatMediator) {\r\n        $this->name = $name;\r\n        $this->chatMediator = $chatMediator;\r\n    }\r\n\r\n    public function getName() {\r\n        return $this->name;\r\n    }\r\n\r\n    public function send($message) {\r\n        $this->chatMediator->showMessage($this, $message);\r\n    }\r\n}</pre></p>\r\n\r\n<p><b>Использование:</b></p>\r\n\r\n<p><pre>$mediator = new ChatRoom();\r\n\r\n$john = new User(\'John Doe\', $mediator);\r\n$jane = new User(\'Jane Doe\', $mediator);\r\n\r\n$john->send(\'Hi there!\');\r\n$jane->send(\'Hey!\');\r\n\r\n// Выходной вид\r\n// Feb 14, 10:58 [John]: Hi there!\r\n// Feb 14, 10:58 [Jane]: Hey!</pre></p>', 3, 6, 657753465, '', ''),
(24, 'Хранитель', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>В качестве примера можно привести калькулятор («создатель»), у которого любая последняя выполненная операция сохраняется в памяти («хранитель»), чтобы вы могли снова вызвать её с помощью каких-то кнопок («опекун»).</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Хранитель» фиксирует и хранит текущее состояние объекта, чтобы оно легко восстанавливалось.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>В качестве примера можно привести калькулятор («создатель»), у которого любая последняя выполненная операция сохраняется в памяти («хранитель»), чтобы вы могли снова вызвать её с помощью каких-то кнопок («опекун»).</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Хранитель» фиксирует и хранит текущее состояние объекта, чтобы оно легко восстанавливалось.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>Шаблон «Хранитель» позволяет восстанавливать объект в его предыдущем состоянии (отмена через откат — undo via rollback).\r\nОбычно шаблон применяется, когда нужно реализовать функциональность отмены операции.</blockquote></p>\r\n\r\n<p><b>Пример</b></p>\r\n\r\n<p>Текстовый редактор время от времени сохраняет своё состояние, чтобы можно было восстановить текст в каком-то прошлом виде.</p>\r\n\r\n<p>Сначала создадим объект «хранитель», в котором можно сохранять состояние редактора.</p>\r\n\r\n<p><pre>class EditorMemento\r\n{\r\n    protected $content;\r\n\r\n    public function __construct(string $content)\r\n    {\r\n        $this->content = $content;\r\n    }\r\n\r\n    public function getContent()\r\n    {\r\n        return $this->content;\r\n    }\r\n}</pre></p>\r\n\r\n<p>Теперь сделаем редактор («создатель»), который будет использовать объект «хранитель».</p>\r\n\r\n<p><pre>class Editor\r\n{\r\n    protected $content = \'\';\r\n\r\n    public function type(string $words)\r\n    {\r\n        $this->content = $this->content . \' \' . $words;\r\n    }\r\n\r\n    public function getContent()\r\n    {\r\n        return $this->content;\r\n    }\r\n\r\n    public function save()\r\n    {\r\n        return new EditorMemento($this->content);\r\n    }\r\n\r\n    public function restore(EditorMemento $memento)\r\n    {\r\n        $this->content = $memento->getContent();\r\n    }\r\n}</pre></p>\r\n\r\n<p><b>Использование:</b></p>\r\n\r\n<p><pre>$editor = new Editor();\r\n\r\n// Пишем что-нибудь\r\n$editor->type(\'This is the first sentence.\');\r\n$editor->type(\'This is second.\');\r\n\r\n// Сохранение состояния в: This is the first sentence. This is second.\r\n$saved = $editor->save();\r\n\r\n// Пишем ещё\r\n$editor->type(\'And this is third.\');\r\n\r\n// Output: Содержимое до сохранения\r\necho $editor->getContent(); // This is the first sentence. This is second. And this is third.\r\n\r\n// Восстанавливаем последнее сохранённое состояние\r\n$editor->restore($saved);\r\n\r\n$editor->getContent(); // This is the first sentence. This is second.</pre></p>', 3, 6, 665464567, '', ''),
(25, 'Наблюдатель', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Хороший пример: люди, ищущие работу, подписываются на публикации на сайтах вакансий и получают уведомления, когда появляются вакансии, подходящие по параметрам.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон определяет зависимость между объектами, чтобы при изменении состояния одного из них его «подчинённые» узнавали об этом.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Хороший пример: люди, ищущие работу, подписываются на публикации на сайтах вакансий и получают уведомления, когда появляются вакансии, подходящие по параметрам.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон определяет зависимость между объектами, чтобы при изменении состояния одного из них его «подчинённые» узнавали об этом.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>В шаблоне «Наблюдатель» есть объект («субъект»), ведущий список своих «подчинённых» («наблюдателей») и автоматически уведомляющий их о любом изменении своего состояния, обычно с помощью вызова одного из их методов.</blockquote></p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Сначала реализуем людей, ищущих работу, которых нужно уведомлять о появлении вакансий.</p>\r\n\r\n<p><pre>class JobPost\r\n{\r\n    protected $title;\r\n\r\n    public function __construct(string $title)\r\n    {\r\n        $this->title = $title;\r\n    }\r\n\r\n    public function getTitle()\r\n    {\r\n        return $this->title;\r\n    }\r\n}\r\n\r\nclass JobSeeker implements Observer\r\n{\r\n    protected $name;\r\n\r\n    public function __construct(string $name)\r\n    {\r\n        $this->name = $name;\r\n    }\r\n\r\n    public function onJobPosted(JobPost $job)\r\n    {\r\n        // Do something with the job posting\r\n        echo \'Hi \' . $this->name . \'! New job posted: \'. $job->getTitle();\r\n    }\r\n}</pre></p>\r\n\r\n<p>Теперь реализуем публикации вакансий, на которые люди будут подписываться.</p>\r\n\r\n<p><pre>class JobPostings implements Observable\r\n{\r\n    protected $observers = [];\r\n\r\n    protected function notify(JobPost $jobPosting)\r\n    {\r\n        foreach ($this->observers as $observer) {\r\n            $observer->onJobPosted($jobPosting);\r\n        }\r\n    }\r\n\r\n    public function attach(Observer $observer)\r\n    {\r\n        $this->observers[] = $observer;\r\n    }\r\n\r\n    public function addJob(JobPost $jobPosting)\r\n    {\r\n        $this->notify($jobPosting);\r\n    }\r\n}</pre></p>\r\n\r\n<p><b>Использование:</b></p>\r\n\r\n<p><pre>// Создаём подписчиков\r\n$johnDoe = new JobSeeker(\'John Doe\');\r\n$janeDoe = new JobSeeker(\'Jane Doe\');\r\n\r\n// Создаём публикатора и прикрепляем подписчиков\r\n$jobPostings = new JobPostings();\r\n$jobPostings->attach($johnDoe);\r\n$jobPostings->attach($janeDoe);\r\n\r\n// Добавляем новую вакансию и смотрим, будут ли уведомлены подписчики\r\n$jobPostings->addJob(new JobPost(\'Software Engineer\'));\r\n\r\n// Output\r\n// Hi John Doe! New job posted: Software Engineer\r\n// Hi Jane Doe! New job posted: Software Engineer</pre></p>', 3, 6, 679877899, '', '');
INSERT INTO `xyz_articles` (`id`, `title`, `img`, `intro`, `full`, `section_id`, `cat_id`, `date`, `meta_desc`, `meta_key`) VALUES
(26, 'Посетитель', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Туристы собрались в Дубай. Сначала им нужен способ попасть туда (виза). После прибытия они будут посещать любую часть города, не спрашивая разрешения, ходить где вздумается. Просто скажите им о каком-нибудь месте — и туристы могут там побывать. Шаблон «Посетитель» помогает добавлять места для посещения.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Посетитель» позволяет добавлять будущие операции для объектов без их модифицирования.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Туристы собрались в Дубай. Сначала им нужен способ попасть туда (виза). После прибытия они будут посещать любую часть города, не спрашивая разрешения, ходить где вздумается. Просто скажите им о каком-нибудь месте — и туристы могут там побывать. Шаблон «Посетитель» помогает добавлять места для посещения.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Посетитель» позволяет добавлять будущие операции для объектов без их модифицирования.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>Шаблон «Посетитель» — это способ отделения алгоритма от структуры объекта, в которой он оперирует. Результат отделения — возможность добавлять новые операции в существующие структуры объектов без их модифицирования. Это один из способов соблюдения принципа открытости/закрытости (open/closed principle).</blockquote></p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Возьмём зоопарк: у нас есть несколько видов животных, и нам нужно послушать издаваемые ими звуки.</p>\r\n\r\n<p><pre>// Место посещения\r\ninterface Animal\r\n{\r\n    public function accept(AnimalOperation $operation);\r\n}\r\n\r\n// Посетитель\r\ninterface AnimalOperation\r\n{\r\n    public function visitMonkey(Monkey $monkey);\r\n    public function visitLion(Lion $lion);\r\n    public function visitDolphin(Dolphin $dolphin);\r\n}</pre></p>\r\n\r\n<p>Реализуем животных:</p>\r\n\r\n<p><pre>class Monkey implements Animal\r\n{\r\n    public function shout()\r\n    {\r\n        echo \'Ooh oo aa aa!\';\r\n    }\r\n\r\n    public function accept(AnimalOperation $operation)\r\n    {\r\n        $operation->visitMonkey($this);\r\n    }\r\n}\r\n\r\nclass Lion implements Animal\r\n{\r\n    public function roar()\r\n    {\r\n        echo \'Roaaar!\';\r\n    }\r\n\r\n    public function accept(AnimalOperation $operation)\r\n    {\r\n        $operation->visitLion($this);\r\n    }\r\n}\r\n\r\nclass Dolphin implements Animal\r\n{\r\n    public function speak()\r\n    {\r\n        echo \'Tuut tuttu tuutt!\';\r\n    }\r\n\r\n    public function accept(AnimalOperation $operation)\r\n    {\r\n        $operation->visitDolphin($this);\r\n    }\r\n}</pre></p>\r\n\r\n<p>Реализуем посетителя:</p>\r\n\r\n<p><pre>class Speak implements AnimalOperation\r\n{\r\n    public function visitMonkey(Monkey $monkey)\r\n    {\r\n        $monkey->shout();\r\n    }\r\n\r\n    public function visitLion(Lion $lion)\r\n    {\r\n        $lion->roar();\r\n    }\r\n\r\n    public function visitDolphin(Dolphin $dolphin)\r\n    {\r\n        $dolphin->speak();\r\n    }\r\n}</pre></p>\r\n\r\n<p><b>Использование:</b></p>\r\n\r\n<p><pre>$monkey = new Monkey();\r\n$lion = new Lion();\r\n$dolphin = new Dolphin();\r\n\r\n$speak = new Speak();\r\n\r\n$monkey->accept($speak);    // Уа-уа-уааааа!    \r\n$lion->accept($speak);      // Ррррррррр!\r\n$dolphin->accept($speak);   // Туут тутт туутт!</pre></p>\r\n\r\n<p>Это можно было сделать просто с помощью иерархии наследования, но тогда пришлось бы модифицировать животных при каждом добавлении к ним новых действий. А здесь менять их не нужно. Например, мы можем добавить животным прыжки, просто создав нового посетителя:</p>\r\n\r\n<p><pre>class Jump implements AnimalOperation\r\n{\r\n    public function visitMonkey(Monkey $monkey)\r\n    {\r\n        echo \'Jumped 20 feet high! on to the tree!\';\r\n    }\r\n\r\n    public function visitLion(Lion $lion)\r\n    {\r\n        echo \'Jumped 7 feet! Back on the ground!\';\r\n    }\r\n\r\n    public function visitDolphin(Dolphin $dolphin)\r\n    {\r\n        echo \'Walked on water a little and disappeared\';\r\n    }\r\n}</pre></p>\r\n\r\n<p><b>Использование:</b></p>\r\n\r\n<p><pre>$jump = new Jump();\r\n\r\n$monkey->accept($speak);   // Ooh oo aa aa!\r\n$monkey->accept($jump);    // Jumped 20 feet high! on to the tree!\r\n\r\n$lion->accept($speak);     // Roaaar!\r\n$lion->accept($jump);      // Jumped 7 feet! Back on the ground!\r\n\r\n$dolphin->accept($speak);  // Tuut tutt tuutt!\r\n$dolphin->accept($jump);   // Walked on water a little and disappeared</pre></p>', 3, 6, 889898776, '', ''),
(27, 'Стратегия', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Возьмём пример с пузырьковой сортировкой. Мы её реализовали, но с ростом объёмов данных сортировка стала выполняться очень медленно. Тогда мы сделали быструю сортировку (Quick sort). Алгоритм работает быстрее на больших объёмах, но на маленьких он очень медленный. Тогда мы реализовали стратегию, при которой для маленьких объёмов данных используется пузырьковая сортировка, а для больших — быстрая.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Стратегия» позволяет переключаться между алгоритмами или стратегиями в зависимости от ситуации.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Возьмём пример с пузырьковой сортировкой. Мы её реализовали, но с ростом объёмов данных сортировка стала выполняться очень медленно. Тогда мы сделали быструю сортировку (Quick sort). Алгоритм работает быстрее на больших объёмах, но на маленьких он очень медленный. Тогда мы реализовали стратегию, при которой для маленьких объёмов данных используется пузырьковая сортировка, а для больших — быстрая.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон «Стратегия» позволяет переключаться между алгоритмами или стратегиями в зависимости от ситуации.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>Шаблон «Стратегия» позволяет при выполнении выбирать поведение алгоритма.</blockquote></p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Возьмём вышеописанный пример. Сначала сделаем интерфейс стратегии и реализации самих стратегий.</p>\r\n\r\n<p><pre>interface SortStrategy\r\n{\r\n    public function sort(array $dataset): array;\r\n}\r\n\r\nclass BubbleSortStrategy implements SortStrategy\r\n{\r\n    public function sort(array $dataset): array\r\n    {\r\n        echo \"Sorting using bubble sort\";\r\n\r\n        // Do sorting\r\n        return $dataset;\r\n    }\r\n}\r\n\r\nclass QuickSortStrategy implements SortStrategy\r\n{\r\n    public function sort(array $dataset): array\r\n    {\r\n        echo \"Sorting using quick sort\";\r\n\r\n        // Do sorting\r\n        return $dataset;\r\n    }\r\n}</pre></p>\r\n\r\n<p>Теперь реализуем клиента, который будет использовать нашу стратегию.</p>\r\n\r\n<p><pre>class Sorter\r\n{\r\n    protected $sorter;\r\n\r\n    public function __construct(SortStrategy $sorter)\r\n    {\r\n        $this->sorter = $sorter;\r\n    }\r\n\r\n    public function sort(array $dataset): array\r\n    {\r\n        return $this->sorter->sort($dataset);\r\n    }\r\n}</pre></p>\r\n\r\n<p><b>Использование:</b></p>\r\n\r\n<p><pre>$dataset = [1, 5, 4, 3, 2, 8];\r\n\r\n$sorter = new Sorter(new BubbleSortStrategy());\r\n$sorter->sort($dataset); // Output : Пузырьковая сортировка\r\n\r\n$sorter = new Sorter(new QuickSortStrategy());\r\n$sorter->sort($dataset); // Output : Быстрая сортировка</pre></p>', 3, 6, 767688776, '', ''),
(28, 'Состояние', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, в графическом редакторе вы выбрали инструмент «Кисть». Она меняет своё поведение в зависимости от настройки цвета: т. е. рисует линию выбранного цвета.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон позволяет менять поведение класса при изменении состояния.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, в графическом редакторе вы выбрали инструмент «Кисть». Она меняет своё поведение в зависимости от настройки цвета: т. е. рисует линию выбранного цвета.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>Шаблон позволяет менять поведение класса при изменении состояния.</p><p><b>Википедия</b></p>\r\n\r\n<blockquote><p>Шаблон «Состояние» реализует машину состояний объектно ориентированным способом. Это достигается с помощью:</p><ul><li>\r\nреализации каждого состояния в виде производного класса интерфейса шаблона «Состояние»,</li>\r\n<li>реализации переходов состояний (state transitions) посредством вызова методов, определённых вышестоящим классом (superclass).</li>\r\n\r\n\r\n<p>Шаблон «Состояние» — это в некотором плане шаблон «Стратегия», при котором возможно переключение текущей стратегии с помощью вызова методов, определённых в интерфейсе шаблона.</p></blockquote>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Текстовый редактор меняет состояние текста, который вы печатаете, т. е. если выбрано полужирное начертание — то редактор печатает полужирным и т. д.</p>\r\n\r\n<p>Сначала сделаем интерфейс состояний и сами состояния:</p>\r\n\r\n<p><pre>interface WritingState\r\n{\r\n    public function write(string $words);\r\n}\r\n\r\nclass UpperCase implements WritingState\r\n{\r\n    public function write(string $words)\r\n    {\r\n        echo strtoupper($words);\r\n    }\r\n}\r\n\r\nclass LowerCase implements WritingState\r\n{\r\n    public function write(string $words)\r\n    {\r\n        echo strtolower($words);\r\n    }\r\n}\r\n\r\nclass Default implements WritingState\r\n{\r\n    public function write(string $words)\r\n    {\r\n        echo $words;\r\n    }\r\n}</pre></p>\r\n\r\n<p>Сделаем редактор:</p>\r\n\r\n<p><pre>class TextEditor\r\n{\r\n    protected $state;\r\n\r\n    public function __construct(WritingState $state)\r\n    {\r\n        $this->state = $state;\r\n    }\r\n\r\n    public function setState(WritingState $state)\r\n    {\r\n        $this->state = $state;\r\n    }\r\n\r\n    public function type(string $words)\r\n    {\r\n        $this->state->write($words);\r\n    }\r\n}</pre></p>\r\n\r\n<p><b>Использование:</b></p>\r\n\r\n<p><pre>$editor = new TextEditor(new Default());\r\n\r\n$editor->type(\'First line\');\r\n\r\n$editor->setState(new UpperCase());\r\n\r\n$editor->type(\'Second line\');\r\n$editor->type(\'Third line\');\r\n\r\n$editor->setState(new LowerCase());\r\n\r\n$editor->type(\'Fourth line\');\r\n$editor->type(\'Fifth line\');\r\n\r\n// Output:\r\n// First line\r\n// SECOND LINE\r\n// THIRD LINE\r\n// fourth line\r\n// fifth line</pre></p>', 3, 6, 878879989, '', ''),
(29, 'Шаблонный метод', 'patterns.jpg', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, вы собрались строить дома.</p><p>Этапы будут такими:</p>\r\n<p>Подготовка фундамента; Возведение стен; Настил крыши; Настил перекрытий;</p>\r\n\r\n<p>Порядок этапов никогда не меняется. Вы не настелите крышу до возведения стен — и т. д. Но каждый этап модифицируется: стены, например, можно возвести из дерева, кирпича или газобетона.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>«Шаблонный метод» определяет каркас выполнения определённого алгоритма, но реализацию самих этапов делегирует дочерним классам.</p>', '<p><b>Аналогия</b></p>\r\n\r\n<p>Допустим, вы собрались строить дома. Этапы будут такими:</p>\r\n<ul>\r\n<li>Подготовка фундамента.</li>\r\n<li>Возведение стен.</li>\r\n<li>Настил крыши.</li>\r\n<li>Настил перекрытий.</li></ul>\r\n\r\n<p>Порядок этапов никогда не меняется. Вы не настелите крышу до возведения стен — и т. д. Но каждый этап модифицируется: стены, например, можно возвести из дерева, кирпича или газобетона.</p>\r\n\r\n<p><b>Вкратце</b></p>\r\n\r\n<p>«Шаблонный метод» определяет каркас выполнения определённого алгоритма, но реализацию самих этапов делегирует дочерним классам.</p><p><b>Википедия</b></p>\r\n\r\n<p><blockquote>«Шаблонный метод» — это поведенческий шаблон, определяющий основу алгоритма и позволяющий наследникам переопределять некоторые шаги алгоритма, не изменяя его структуру в целом.</blockquote></p>\r\n<p><b>Пример</b></p>\r\n\r\n<p>Допустим, у нас есть программный инструмент, позволяющий тестировать, проводить контроль качества кода (lint), выполнять сборку, генерировать отчёты сборки (отчёты о покрытии кода, о качестве кода и т. д.), а также развёртывать приложение на тестовом сервере.</p>\r\n\r\n<p>Сначала наш базовый класс определяет каркас алгоритма сборки.</p>\r\n\r\n<p><pre>abstract class Builder\r\n{\r\n\r\n    // Шаблонный метод\r\n    final public function build()\r\n    {\r\n        $this->test();\r\n        $this->lint();\r\n        $this->assemble();\r\n        $this->deploy();\r\n    }\r\n\r\n    abstract public function test();\r\n    abstract public function lint();\r\n    abstract public function assemble();\r\n    abstract public function deploy();\r\n}</pre></p>\r\n\r\n<p>Теперь создаём реализации:</p>\r\n\r\n<p><pre>class AndroidBuilder extends Builder\r\n{\r\n    public function test()\r\n    {\r\n        echo \'Running android tests\';\r\n    }\r\n\r\n    public function lint()\r\n    {\r\n        echo \'Linting the android code\';\r\n    }\r\n\r\n    public function assemble()\r\n    {\r\n        echo \'Assembling the android build\';\r\n    }\r\n\r\n    public function deploy()\r\n    {\r\n        echo \'Deploying android build to server\';\r\n    }\r\n}\r\n\r\nclass IosBuilder extends Builder\r\n{\r\n    public function test()\r\n    {\r\n        echo \'Running ios tests\';\r\n    }\r\n\r\n    public function lint()\r\n    {\r\n        echo \'Linting the ios code\';\r\n    }\r\n\r\n    public function assemble()\r\n    {\r\n        echo \'Assembling the ios build\';\r\n    }\r\n\r\n    public function deploy()\r\n    {\r\n        echo \'Deploying ios build to server\';\r\n    }\r\n}</pre></p>\r\n\r\n<p><b>Использование:</b></p>\r\n\r\n<p><pre>$androidBuilder = new AndroidBuilder();\r\n$androidBuilder->build();\r\n\r\n// Output:\r\n// Выполнение Android-тестов\r\n// Линтинг Android-кода\r\n// Создание Android-сборки\r\n// Развёртывание Android-сборки на сервере\r\n\r\n$iosBuilder = new IosBuilder();\r\n$iosBuilder->build();\r\n\r\n// Output:\r\n// Выполнение iOS-тестов\r\n// Линтинг iOS-кода\r\n// Создание iOS-сборки\r\n// Развёртывание iOS-сборки на сервере</pre></p>', 3, 6, 787878678, '', ''),
(30, 'Асинхронная дозагрузка товара в категории или мой первый проект на связке jQuery + AJAX + JFactory', 'jquery_ajax.png', '<p>Руководством была поставлена зада: «Хотим, чтобы продукцию на сайте в категориях можно было подгружать без обновления страницы и видеть какие продукты были загружены страницами ранее. В общем хотим, чтобы было как на сайте <a href=\"https://rozetka.com.ua/notebooks/c80004/filter/preset=dlya-biznesa/\">Розетка</a>.<p> \r\n<p>Я решил написать функцию на JavaScript с использованием технологии AJAX (для асинхронного обращения к серверу, то есть, обращения без полной перезагрузки страницы).</p> ', '<p>Руководством была поставлена зада: «Хотим, чтобы продукцию на сайте в категориях можно было подгружать без обновления страницы и видеть какие продукты были загружены страницами ранее. В общем хотим, чтобы было как на сайте <a href=\"https://rozetka.com.ua/notebooks/c80004/filter/preset=dlya-biznesa/\">Розетка</a>.<p> \r\n<p>Я решил написать функцию на JavaScript с использованием технологии AJAX (для асинхронного обращения к серверу, то есть, обращения без полной перезагрузки страницы). Так как сайт создан на движке Joomla, а шаблон сайта реализовывался на <a href=\" https://getbootstrap.com/docs/3.3/\">CSS framework Bootstrap</a> то и писать решил клиентскую часть с использованием JavaScript библиотеки <a href=\" https://jquery.com/\">jQuery</a> (половина компонентов нашего шаблона уже использует эту библиотеку, которая является частью Bootstrap). Серверная часть реализована на PHP классе Joomla -<a href=\"https://api.joomla.org/cms-3/classes/JFactory.html\">JFactory</a>. Класс JFactory обеспечивает доступ к основным объектам Joomla, таким как JDatabase (Порождающий шаблон проектирования фабрика). Через него получаем доступ к базе данных. </p>\r\n<p><b><a href=\" http://tekknow.com.ua/new/oborudovanie/davlenie/pompyi-dlya-sravnitelnoy-kalibrovki\">Результатом работы</a></b> стало возможным просматривать товар как постранично, так и в виде ленты, без полной перезагрузки страницы (Одновременно работают оба способа, не мешая друг другу).</p>\r\n', 4, NULL, 1458045977, 'Асинхронная дозагрузка страниц', 'jQuery, AJAX'),
(31, 'Техническое задание', 'tehzadanie.png', '<p><b>Требования:</b></p><p><b>1.Требование к дизайну:</b></p>\r\n<p>Дизайн должен быть адаптивным(Резиновым). Оформлен в деловом стиле, в постельных тонах(мягких). Мобильная версия должна быть не перегружена анимацией/эффектами, если такие будут присутствовать в дизайне с большим разрешением (для ПК, Ноутбуков). </p>', '<p><b>Требования:</b></p><p><b>1.Требование к дизайну:</b></p>\r\n<p>Дизайн должен быть адаптивным(Резиновым). Оформлен в деловом стиле, в постельных тонах(мягких). Мобильная версия должна быть не перегружена анимацией/эффектами, если такие будут присутствовать в дизайне с большим разрешением (для ПК, Ноутбуков). </p><p><b>2.Требование к пользовательскому интерфейсу:</b></p>\r\n<p>Учтена возможность добавления, изменения, удаления оборудования из прайса (Карточки товара). Добавление диапазона измерений (Нижний, Верхний придел измерений), его размерность. </p>\r\n<p>Размерность диапазона измерений оборудования, указанного в прайсе, в дальнейшем эталонного СИТ (Средство Измерительной Техники) и размерность оборудования, на основании которого необходимо сделать выборку, в дальнейшем рабочее СИТ, может отличатся (Имеется ввиду, что та размерность, которая хранится в карточке товара и та, которую пользователь вводит как критерий поиска могут отличатся и для расчета их надо приводить к «общему знаменателю»). </p>\r\n<p>Размерность результирующего набора, в дальнейшем тех. Решение, должна соответствовать размерности рабочего СИТ (те критерии, что пользователь вводит для поиска).</p>\r\n<p>Добавление погрешности на интервал или интервалы диапазона измерений. При вводе интервала, он может указывается как в абсолютном(числовом), так и относительном (% от диапазона измерений) значении. В прайсе он должен находится в абсолютном значении. Интервалами должен закрыть весь диапазон измерений.</p> \r\n<p>Возможность добавления в web-приложение характеристик/фильтров и их привязка к определенной категории или нескольким категориям.</p>\r\n<p>Должна быть возможность фильтровать по количеству оборудования в решении («базовый фильтр»). У любой характеристики должна быть возможность вывести все её варианты и выделить зелёным цветом утверждения (большая галочка) и красным (большой крестик) отрицания (Если значения –булевые- «Да/Нет», «Присутствует/отсутствует» и т.д.). Также при сравнении по конкретным полям выделять цветом (возможно и другим шрифтом) общие и различные значения соответствующих характеристик. Подобрать приятную, не раздражающую цветовую гамму для этого.</p>\r\n<p>У эталонных СИТ в результирующем наборе должна быть указана прямая ссылки на этот же эталонный СИТ на официальном сайте Юр. лица и на сайт производителя. </p>\r\n<p>Возможность выгружать решения в EXCEL (по заранее подготовленному шаблону) или PDF (Вариант для печати). Для зарегистрированных пользователей (для юр. лиц), возможность сохранять решения в системе (ограниченное нами количество с возможностью расширения). </p>\r\n<p>Интерфейс для мобильных устройств должен быть компактный, но максимально не терять свой функционал по сравнению с деск-топной версией (ПК, ноутбук). </p>\r\n<p><b>3.Критерии отбора оборудования:</b></p>\r\n<p>Отбор должен проходить по перекрыванию диапазона измерений (диапазон измерений эталонного СИТ, должен перекрывать один или несколько диапазонов измерения рабочего СИТ) и по отношению погрешности рабочего СИТ к погрешности эталонного СИТ. Оно должно быть больше или равно 3(по умолчанию). Может быть 2 при желании пользователя. </p>\r\n', 4, 7, 1490168777, 'Техническое задание', '');

-- --------------------------------------------------------

--
-- Структура таблицы `xyz_categories`
--

DROP TABLE IF EXISTS `xyz_categories`;
CREATE TABLE IF NOT EXISTS `xyz_categories` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `img` varchar(255) NOT NULL,
  `section_id` int(10) UNSIGNED NOT NULL,
  `description` text NOT NULL,
  `meta_desc` varchar(255) NOT NULL,
  `meta_key` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `xyz_categories`
--

INSERT INTO `xyz_categories` (`id`, `title`, `img`, `section_id`, `description`, `meta_desc`, `meta_key`) VALUES
(1, 'HTML Основы', 'html-osnovy.jpg', 1, '<p>В данной категории Вы сможете познакомиться с множеством <b>тегов HTML</b>. Вы убедитесь, что <b>HTML - это просто!</b></p><p>В ниже приведённых статьях имеется вся информация, которая нужна по этому языку разметки.</p><p>Ознакомившись с данными материалы, Вы сможете сразу начать <b>создавать свой сайт</b> и начать зарабатывать на нём!</p><h3>Прочитав статьи по основам HTML, Вы узнаете:</h3><p>1) О структуре <b>HTML-документа</b>.</p><p>2) Как добавлять ссылки на <b>HTML-страницы</b>.</p><p>3) Как добавлять изображения на <b>HTML-страницы</b>.</p><p>4) О способах изменения внешнего вида текста в <b>HTML</b>.</p><p>5) Как добавлять списки на <b>HTML-страницы</b>.</p><p>6) О способах выравнивания элементов в <b>HTML</b>.</p><p>7) Как создавать формы в <b>HTML</b>.</p><p>8) Как создавать таблицы в <b>HTML</b>.</p><p>9) Как выбрать цвет в <b>HTML</b>.</p><p>10) Как установить Favicon на сайт.</p><p>11) Как вставить дополнительные пробелы в <b>HTML</b>.</p><p>12) Как установить страницу 404.</p><p>13) Как сделать <b>редирект</b> на <b>HTML</b>.</p><p>14) Как вывести спецсимволы в <b>HTML</b>.</p><p>15)  Зачем нужен <b>DOCTYPE</b>.</p><p>16) Какая разница между <b>HTML</b> и <b>XHTML</b>.</p><p>17)  Как добавить видео на сайт.</p><p>18) О проверке сайта в разных браузерах.</p><p>19) О значение валидного <b>HTML-кода</b>.</p><p>20) Как проверить статус <b>ICQ</b> через <b>HTML</b>.</p><p>21) Что такое мета-теги в <b>HTML</b>.</p><p>22) Какие имеются мета-теги для страницы в <b>HTML</b>.</p><p>23) Какие имеются мета-теги для браузера в <b>HTML</b>.</p><p>24) Какие имеются мета-теги для поисковых систем в <b>HTML</b>.</p><p>25) Что такое кодировка.</p><p>26) Что лучше: блочная вёрстка или табличная.</p><p>27) Что делать, если <b>HTML-файл</b> открывается как <b>TXT</b>.</p><p>28) Как вставить аудио на сайт.</p><p>29) Почему <b>Dreamweaver</b> - это плохо.</p><p>30) Как сделать дизайн для сайта.</p><p>31) Что такое вёрстка.</p><p>32) Что такое сайт под ключ.</p><p>33) Как поставить горячую клавишу на ссылку.</p><p>34) Как сделать кпопку \"Наверх\".</p><p>35) Об использовании тега <b>optgroup</b> в <b>HTML</b>.</p><p>36) Почему не отображается картинка на сайте.</p><p>37) Почему фреймы - это плохо.</p><p>38) Стоит ли использовать <b>Flash</b> при создании сайта?</p><p>39) Какова структура блочной вёрстки?</p><p>40) Как открыть ссылку в новом окне с валидным кодом?</p><p>41) Как запретить посетителю сохранять картинки?</p><p>42) Как запретить посетителю копировать текст?</p><p>43) Стоит ли делать вёрстку под старые браузеры.</p><p>44) Как сделать мобильную версию сайта.</p><p>45) Как поменять кодировку на сайте.</p><p>46) Как сделать автообновление страницы.</p><p>47) Как сделать комментирование на <b>HTML-сайте</b>.</p><p>48) Как проверить сайт в разных версиях <b>IE</b>.</p><p>49) Как установить радио на сайт.</p><p>50) Какая структура у двухколоночного сайта.</p><h3 style=\"text-align: center;\">Все материалы по основам HTML</h3>', 'Множество статей по основам HTML. Рассматриваются теги HTML, множество примеров их использования.', 'html основы, сайт html, создание сайта на html'),
(2, 'HTML 5', 'html-5.jpg', 1, '<p>В данной категории Вы сможете познакомиться с новым стандартом <b>HTML</b> - <b>HTML 5</b>, который не так давно появился в нашей жизни, и ещё очень многие про него ничего не знают, либо просто слышали. И данная категория позволит восполнить этот пробел в знаниях, ведь <b>HTML 5</b> - это будущее Интернета, к которому надо быть готовым любому Web-мастеру.</p><p>В статьях этой категории содержится множество нововведений в <b>HTML 5</b>, которые необычайно важны и которые обязательно надо знать. Подробно расписаны новые элементы, а также подробно расписано их назначение.</p><h3>Прочитав статьи по HTML 5, Вы узнаете:</h3><p>1) Что нового появилось в <b>HTML 5</b>.</p><p>2) Какие элементы появились для создания структуры <b>HTML-документа</b>.</p><p>3) Какие появились новые блочные элементы в <b>HTML 5</b>.</p><p>4) Какие новые теги появились в <b>HTML 5</b> для форматирования текста.</p><p>5) Какие элементы появились для работы с мультимедиа в <b>HTML 5</b>.</p><p>6) Какие <b>HTML-теги</b> появились для интерактивной работы с документом.</p><p>7) Почему не работает <b>HTML5</b>.</p><p>8) Об атрибуте <b>download</b> в <b>HTML5</b>.</p><p>9) Нужно ли сейчас использовать <b>HTML5</b> и <b>CSS3</b>.</p><p>10) Новые атрибуты для полей форм, появившиеся в <b>HTML5</b>.</p><p>11) Какие <b>новые значения атрибута type</b> появились в <b>HTML5</b>.</p><p>12) Зачем нужен атрибут <b>data-*</b> в <b>HTML5</b>.</p><p>13) Что такое <b>canvas</b> в <b>HTML5</b>.</p>\r\n<h3 style=\"text-align: center;\">Все материалы по HTML 5</h3>', 'Статьи по HTML 5 - новому стандарту самого популярного языка разметки.', 'html 5, html 5 нововведения, html 5 новые теги'),
(3, 'CSS Основы', 'css-osnovy.jpg', 2, '<p>Технология <b>CSS</b> используется в первую очередь дизайнерами, ведь именно они создают дизайн сайта. Однако, ошибочно полагать, что Web-мастерам <b>CSS</b> знать не обязательно. Достаточно вспомнить хотя бы пример из описания раздела по CSS. Помимо мобильности своего сайта, таблицы стилей позволяют создавать различные классические дизайнерские решения (например, выпадающее меню). А вместе с JavaScript позволяют создавать динамические <b>HTML-страницы</b> (<i>DHTML</i>), красота и удобство которых, порой, просто поражают.</p><p>Разумеется, для того, чтобы создавать подобные вещи необходимо познакомиться с <b>основами CSS</b>. И данная категория сайта поможет Вам это сделать максимально быстро и эффективно.</p><h3>Прочитав статьи по основам CSS, Вы узнаете:</h3><p>1) Синтаксис <b>CSS</b>.</p><p>2) Способы и их приоритеты задания <b>CSS-стиля</b>.</p><p>3) Типы селекторов в <b>CSS</b>.</p><p>4) <b>CSS</b> хаки для браузеров.</p><p>5) Правила написания <b>CSS</b>.</p><p>6) Как создать всплывающую подсказку на <b>CSS</b>.</p><p>7) Как изменить внешний вид первой буквы через <b>CSS</b>.</p><p>8) Как задать вид курсора через <b>CSS</b>.</p><p>9) Как изменить вид курсора при наведении мыши с помощью <b>CSS</b>.</p><p>10) Как сделать подменю на <b>CSS</b>.</p><p>11) О замене свойства <b>min-width</b> в <b>IE6</b>.</p><p>12) О валидности <b>CSS</b>.</p><p>13) Как задать цвет посещённых ссылок.</p><p>14) Как задать отступ абзаца через <b>CSS</b>.</p><p>15) Как сделать закруглённые углы через <b>CSS</b>.</p><p>16) Как вместо маркера списка поставить своё изображение через <b>CSS</b>.</p><p>17) Как сделать фон картинкой.</p><p>18) Как сделать затемнение фона на <b>CSS</b>.</p><p>19) Что такое дочерние селекторы в <b>CSS</b>.</p><p>20) Какие единицы измерения имеются в <b>CSS</b>.</p><p>21) Как сделать всплывающее окно с затемнением.</p><p>22) Как сделать анимированный фон.</p><p>23) Как сделать красивое текстовое поле.</p><p>24) Как менять изображение при наведении на него курсора мыши.</p><p>25) Что такое псевдоэлементы в <b>CSS</b>.</p><p>26) Что такое <b>CSS спрайты</b>.</p><p>27) Как прижать футер (подвал) к низу через <b>CSS</b>.</p><p>28) Как запретить изменение размеров <b>textarea</b> через <b>CSS</b>.</p><p>29) Как нарисовать треугольник через <b>CSS</b>.</p><p>30) Как обработать событие <b>click</b> через <b>CSS</b>.</p><p>31) Как задать свой курсор через <b>CSS</b>.</p><p>32) Как сделать горизонтальное выпадающее меню на <b>CSS</b>.</p><p>33) Как использовать нестандартный шрифт на сайте.</p><p>34) Как изменить фон у радиокнопки через <b>CSS</b>.</p><p>35) Можно ли использовать <b>CSS3</b>.</p><p>36) Как сделать тень на <b>CSS</b>.</p><p>37) Как задать атрибуты <b>cellpadding</b> и <b>cellspacing</b> на <b>CSS</b>.</p><p>38) Как сделать <b>div со 100% height</b>.</p><p>39) О совместимости <b>z-index</b> и плеера <b>Youtube</b>.</p><p>40) Почему плохо использовать <b>-moz</b>, <b>-ms</b>, <b>-webkit</b> и прочие свойства.</p><p>41) Стоит ли использовать <b>CSS Reset</b>.</p><p>42) Как вертикально выравнять маркер списка.</p><p>43) Как сделать версию для печати.</p><p>44) Как сделать кроссбраузерную прозрачность на <b>CSS</b>.</p><p>45) Что такое <b>clearfix</b>.</p><p>46) Как частично отменить <b>float</b>.</p><p>47) Как сделать двухколоночную вёрстку с одинаковой высотой колонок.</p><p>48) Что такое адаптивная вёрстка.</p><p>49) Что такое медиа-запросы в <b>CSS</b>.</p><h3 style=\"text-align: center;\">Все материалы по основам CSS</h3>', 'Материалы по основам CSS - каскадным таблицам стилей. Рассматриваются селекторы CSS и хаки для браузеров.', 'css, dhtml, селекторы css, хаки для браузеров'),
(4, 'Порождающие шаблоны проектирования', 'patterns.jpg', 3, '<p>Порождающие шаблоны описывают создание (instantiate) объекта или группы связанных объектов.</p>\r\n\r\n<p>Википедия</p>\r\n\r\n<p><blockquote>В программной инженерии порождающими называют шаблоны, которые используют механизмы создания объектов, чтобы создавать объекты подходящим для данной ситуации способом. Базовый способ создания может привести к проблемам в архитектуре или к её усложнению. Порождающие шаблоны пытаются решать эти проблемы, управляя способом создания объектов.</blockquote></p>', 'Порождающие шаблоны описывают создание (instantiate) объекта или группы связанных объектов', 'Простая фабрика, Фабричный метод, Абстрактная фабрика, Строитель,\r\nПрототип, Одиночка'),
(5, 'Структурные шаблоны проектирования', 'patterns.jpg', 3, '<p><b>Вкратце</b></p>\r\n\r\n<p>Эти шаблоны в основном посвящены компоновке объектов (object composition). То есть тому, как сущности могут друг друга использовать. Ещё одно объяснение: структурные шаблоны помогают ответить на вопрос «Как построить программный компонент?»</p>\r\n\r\n<p><b>Википедия</b></p>\r\n\r\n<p><blockquote>Структурными называют шаблоны, которые облегчают проектирование, определяя простой способ реализации взаимоотношений между сущностями.</blockquote></p>', 'Структурные шаблоны проектирования', ' Структурные шаблоны проектирования, шаблоны проектирования, паттерны'),
(6, 'Поведенческие шаблоны проектирования', 'patterns.jpg', 3, '<p><b>Вкратце</b></p>\r\n\r\n<p>Они связаны с присвоением обязанностей (responsibilities) объектам. От структурных шаблонов они отличаются тем, что не просто описывают структуру, но и очерчивают шаблоны передачи данных, обеспечения взаимодействия. То есть поведенческие шаблоны позволяют ответить на вопрос «Как реализовать поведение в программном компоненте?»</p>\r\n\r\n<p><b>Википедия</b></p>\r\n\r\n<p>Поведенческие шаблоны проектирования определяют алгоритмы и способы реализации взаимодействия различных объектов и классов. Они обеспечивают гибкость взаимодействия между объектами.</p>', '', ''),
(7, 'MetroLab', 'metrolab.png', 4, '<p><b>Идея:</b></p> \r\n<p>Разработать web-приложение, которое будет по заданному пользователем измерительному диапазону или диапазонам и погрешности (может быть для нескольких диапазонов одинаковая) делать выборку подходящего оборудования из прайса фирмы.</p><p>Выводить комбинации всевозможных подходящих решений.</p> <p>Должна быть возможность добавлять в систему и использовать фильтра для сужения выходного набора решений, по возможности, сортировка решений.</p><p>У каждого решения должен быть наглядный график изменения погрешности на всем измерительном диапазоне.</p><p>Масштаб (его размерность) не фиксирован, однако возможность его динамического изменения желательна (там, где это возможно), главное, чтобы график с его размерами вписывался в размеры сайта, был читабельным, был одинаковый (масштаб) для всего набора.</p><p>Должен быть предусмотрен вариант сравнения решений между собой по их характеристикам.</p>\r\n', 'разработку web-приложения по подбору оборудования из прайса фирмы по измерительному диапазону и погрешности измерения', '');

-- --------------------------------------------------------

--
-- Структура таблицы `xyz_comments`
--

DROP TABLE IF EXISTS `xyz_comments`;
CREATE TABLE IF NOT EXISTS `xyz_comments` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `article_id` int(10) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `parent_id` int(10) UNSIGNED DEFAULT NULL,
  `text` text NOT NULL,
  `date` int(10) UNSIGNED NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `xyz_comments`
--

INSERT INTO `xyz_comments` (`id`, `article_id`, `user_id`, `parent_id`, `text`, `date`) VALUES
(1, 1, 1, NULL, 'Спасибо!', 1399120080),
(2, 1, 2, 1, 'Согласен!', 1399120109),
(3, 1, 1, 2, 'Спасибо за согласие!', 1399120137),
(4, 1, 1, NULL, 'Да, здорово!', 1399120161);

-- --------------------------------------------------------

--
-- Структура таблицы `xyz_courses`
--

DROP TABLE IF EXISTS `xyz_courses`;
CREATE TABLE IF NOT EXISTS `xyz_courses` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `type` tinyint(1) UNSIGNED NOT NULL,
  `header` varchar(100) NOT NULL,
  `sub_header` varchar(100) NOT NULL,
  `img` varchar(255) NOT NULL,
  `link` varchar(255) NOT NULL,
  `text` text NOT NULL,
  `did` int(10) UNSIGNED DEFAULT NULL,
  `latest` tinyint(1) UNSIGNED NOT NULL,
  `section_ids` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `xyz_courses`
--

INSERT INTO `xyz_courses` (`id`, `type`, `header`, `sub_header`, `img`, `link`, `text`, `did`, `latest`, `section_ids`) VALUES
(1, 1, 'Мой Видеокурс', 'Создание и раскрутка сайта от А до Я', 'kurs-cover.png', '#', '<p>Видеокурс \"<b>Создание и Раскрутка сайта от А до Я</b>\" - это 246 видеоуроков общей продолжительностью более 50-ти часов по теме создания, размещения в Интернете и раскрутке сайта.</p> <p>В уроке рассмотрены следующие необходимые любому <b>профессиональному Web-мастеру</b> языки: <b>HTML</b>, <b>CSS</b>, <b>JavaScript</b>, <b>PHP</b>, <b>SQL</b> (с использованием <b>MySQL</b>) и <b>XML</b>.</p> <p>Помимо этого в Видеокурсе рассматривается самая популярная система управления контентом - <b>Joomla</b>.</p> <p>Также в Видеокурсе \"<b>Создание и Раскрутка сайта от А до Я</b>\" показывается весь процесс создания реального сайта. Затем демонстрируется его размещение в Интернете, а также последующая раскрутка. Всё это записывается, и Вам остаётся лишь просто повторить, чтобы стать владельцем своего собственного сайта!</p> <p>И, наконец, почти к каждому уроку идут упражнения, которые позволяют закрепить полученные знания из урока уже на практике.</p>', NULL, 0, '6,8,9'),
(2, 1, ' Мой Видеокурс', 'Вёрстка сайта с нуля', 'makeup-cover.png', '#', '<p>Видеокурс \"<b>Вёрстка сайта с нуля</b>\" - это уникальная информация по созданию страниц любой сложности.</p>\n<p>Пройдя данный курс, Вы сможете не только верстать страницы с любым по сложности дизайном, но и выводить на чистую воду недобросовестных верстальщиков, которых в Рунете около <b>95% (!!!)</b>. Поэтому данную информацию <b>надо знать всем: кто создаёт сам и кто заказывает их на стороне</b>.</p>\n<p>Также вёрстка страниц - это очень прибыльное дело. Заработок верстальщиков составляет <b>от 100 рублей в час у новичков до 1500 рублей в час уже у профи</b>, которым Вы станете после просмотра курса и практики.</p>\n<p>Также в Видеокурсе \"<b>Вёрстка сайта с нуля</b>\" рассказывается о том, <b>как искать заказчиков, где их искать, как им писать в первый раз</b>. Всё это я подробно рассказываю в курсе, а также <b>даю уже готовый вариант первого обращения к заказчику</b>. С таким обращением <b>вероятность того, что заказчик к Вам обратится, близка к 100%</b>. А учитывая, что Вы будете профессионалом, то этот заказчик превратится в постоянного!</p>\n<p>Весь курс соткан из <b>практических примеров реальной вёрстки</b>. А также почти к каждому уроку идут <b>упражнения для закрепления материала</b>, поэтому в отличном результате можете быть уверены!</p>', NULL, 0, '1,2'),
(3, 1, 'Мой Видеокурс', 'PHP и MySQL с Нуля до Гуру', 'php-cover.png', '#', '<p>Видеокурс \"<b>PHP и MySQL с Нуля до Гуру</b>\" - это <b>более 20-ти часов видеоуроков</b> по изучению <b>PHP и MySQL</b> с точки зрения создания сайтов.</p>\n<p>Ключевой момент курса - это <b>создание движка для сайта с нуля</b>. Никакого готового кода, никаких готовых скриптов, а только всё с нуля и прямо на Ваших глазах. Каждая строчка комментируется. Но, главное, <b>я рассказываю о своём подходе при создании движков</b>. Этот подход универсален и оптимален для сайтов любой функциональности: будь то социальная сеть или будь то поисковая система. <b>Данный подход является лишь моими многолетними наработками</b>, и именно с его помощью я создаю абсолютно все свои сайты. <b>Я нигде и никогда не публиковал его, и он достанется только Вам уже готовеньким и отполированным</b>.</p>\n<p>Поскольку программирование - это прежде всего практика, то я практически для каждого урока сделал упражнения. Причём данные <b>упражнения направлены не только на закрепление материала, но и на реализацию реальных задач, встающих перед Web-разработчиками</b> при создании сайтов.</p>\n<p>Исходя из вышесказанного, просмотрев курс и выполнив упражнения, <b>Вы сможете без проблем создавать функциональные движки для самых различных сайтов</b>.</p>', NULL, 0, '4,5'),
(4, 1, 'Мой Видеокурс', 'Создание Интернет-магазина на PHP и MySQL', 'im-cover.png', '#', '<p>Видеокурс \"<b>Создание Интернет-магазина на PHP и MySQL</b>\" - это уникальный курс по созданию Интернет-магазина с нуля. Особенностью данного курса является то, что создание идёт с самого начала, то есть от идеи. Далее создаётся <b>дизайн</b> всех необходимых страниц, после делается их <b>вёрстка</b>. Затем создаётся <b>движок на PHP и MySQL</b>, после делается <b>Admin-панель</b> и, наконец, готовый сайт <b>размещается в Интернете</b>.</p>\n<p>Адрес созданного в этом курсе сайта: <a rel=\"external\" href=\"http://storedvd.ru\">http://storedvd.ru</a></p>\n<p>Всё создание сайта будет происходить на Ваших глазах, поэтому Вы легко сможете повторить весь процесс создания сложного функционального сайта уже при разработке своего портала.</p>', NULL, 0, '1,2,4,5'),
(5, 1, 'Мой Видеокурс', 'JavaScript, jQuery и Ajax с Нуля до Гуру', 'javascript-cover.png', '#', '<p>Видеокурс \"<b>JavaScript, jQuery и Ajax с Нуля до Гуру</b>\" научит Вас \"вдыхать жизнь\" в страницы, делая их с потрясающими эффектами и максимальным удобством для пользователя.</p>\n<p>Курс <b>научит Вас писать скрипты на JavaScript</b>, а также обучит использованию библиотеки <b>jQuery</b> и технологии <b>Ajax</b>.</p><p>Практически любой красивый сайт (с красивыми галереями изображений, слайдерами, плавными переходами и так далее) использует <b>jQuery</b>. А практически на любом серьёзном сайте вовсю используется технология <b>Ajax</b>, которая делает работу с сайтом максимальной удобной.</p>\n<p>Поэтому курс \"<b>JavaScript, jQuery и Ajax с Нуля до Гуру</b>\" Вам просто необходим, если Вы хотите <b>создавать по-настоящему достойные сайты</b>.</p>', NULL, 0, '3'),
(6, 2, ' Видеокурс по HTML', 'Бесплатный Видеокурс по основам HTML', 'html-cover.png', '#', '<p><b>Особенности Видеокурса:</b></p><p>- 11 видеоуроков</p><p>- Более 2-х часов видео</p><p>- Создание реального сайта</p>', 78816, 0, '1'),
(7, 2, 'Мини-курс по вёрстке сайтов', 'Бесплатный мини-курс по вёрстке страниц', 'freemakeup-cover.png', '#', '<p><b>Особенности курса:</b></p><p>- Пример табличной вёрстки</p><p>- Пример блочной вёрстки</p><p>- Вёрстка реального PSD-макета</p>', 330726, 0, '1,2'),
(8, 2, 'Видеокурс по PHP', 'Бесплатный Видеокурс по основам PHP', 'freephp-cover.png', '#', '<p><b>Особенности Видеокурса:</b></p><p>- Создание реального PHP-сайта</p><p>- Регистрация и авторизация</p><p>- Гостевая книга</p><p>- Поиск по сайту</p>', 208686, 0, '4,5'),
(9, 2, 'Бесплатный курс', 'Бесплатный курс по созданию Интернет-магазина с нуля', 'freeim-cover.png', '#', '<p><b>Из этого курса Вы узнаете:</b></p><p>- Как сделать дизайн для сайта</p><p>- Как сделать вёрстку страниц</p><p>- Как создаётся движок</p><p>- Как сделать Admin-панель</p><p>- Как размещается сайт в Интернете</p>', 314730, 0, '1,2,4,5'),
(10, 3, 'Бесплатный онлайн-семинар', '5 шагов и профессиональный сайт готов', 'create-im.png', '#', '<p><b>После семинара:</b></p><p>- Вы будете иметь чёткий план действий.</p><p>- Вы сможете начать создавать сайт.</p><p>- Вы сможете легко ориентироваться в информации по созданию сайтов.</p>', NULL, 0, '1'),
(11, 3, 'Бесплатный онлайн-семинар', 'Как создать профессиональный Интернет-магазин', 'create-im.png', '#', '<p><b>После семинара:</b></p><p>- Вы будете знать, как создать Интернет-магазин.</p><p>- Вы получите бесплатный подарок с подробным описанием каждого шага.</p><p>- Вы сможете уже приступить к созданию Интернет-магазина.</p>', NULL, 0, '1,2,3,4,5'),
(12, 2, 'Новинка!', 'Бесплатный курс по JavaScript, jQuery и Ajax', 'freejs-cover.png', '#', '<p><b>Из этого курса:</b></p>\r\n<p>- Вы узнаете синтаксис JavaScript</p>\r\n<p>- Вы узнаете базовые вещи по JavaScript</p>\r\n<p>- Вы увидите примеры использования JavaScript</p>\r\n<p>- Вы увидите пример использования jQuery</p>\r\n<p>- Вы узнаете, что такое Ajax, а также увидите пример из практики</p>', 379930, 1, '3');

-- --------------------------------------------------------

--
-- Структура таблицы `xyz_menu`
--

DROP TABLE IF EXISTS `xyz_menu`;
CREATE TABLE IF NOT EXISTS `xyz_menu` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `type` int(11) NOT NULL,
  `title` varchar(100) NOT NULL,
  `link` varchar(255) NOT NULL,
  `parent_id` int(10) UNSIGNED DEFAULT NULL,
  `external` tinyint(1) UNSIGNED NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `xyz_menu`
--

INSERT INTO `xyz_menu` (`id`, `type`, `title`, `link`, `parent_id`, `external`) VALUES
(1, 1, 'Главная', '/', NULL, 0),
(2, 1, 'HTML', '/section?id=1', NULL, 0),
(3, 1, 'CSS', '/section?id=2', NULL, 0),
(4, 1, 'HTML Основы', '/category?id=1', 2, 0),
(5, 1, 'HTML 5', '/category?id=2', 2, 0),
(6, 1, 'CSS Основы', '/category?id=3', 3, 0),
(7, 2, 'Главная', '/', NULL, 0),
(10, 1, '\r\nШаблоны проектирования', '/section?id=3', NULL, 0),
(11, 1, 'Порождающие шаблоны проектирования', '/category?id=4', 10, 0),
(12, 1, 'Структурные шаблоны проектирования', '/category?id=5', 10, 0),
(13, 1, 'Поведенческие шаблоны проектирования', '/category?id=6', 10, 0),
(14, 1, 'Мои проекты', '/section?id=4', NULL, 0),
(15, 1, 'MetroLab', '/category?id=7', 14, 0);

-- --------------------------------------------------------

--
-- Структура таблицы `xyz_polls`
--

DROP TABLE IF EXISTS `xyz_polls`;
CREATE TABLE IF NOT EXISTS `xyz_polls` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `state` tinyint(1) UNSIGNED NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `xyz_polls`
--

INSERT INTO `xyz_polls` (`id`, `title`, `state`) VALUES
(1, 'Что Вас интересует больше?', 0),
(2, 'Посоветуйте тему для будущих статей', 1);

-- --------------------------------------------------------

--
-- Структура таблицы `xyz_poll_data`
--

DROP TABLE IF EXISTS `xyz_poll_data`;
CREATE TABLE IF NOT EXISTS `xyz_poll_data` (
  `id` int(10) UNSIGNED NOT NULL,
  `poll_id` int(10) UNSIGNED NOT NULL,
  `title` varchar(100) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `xyz_poll_data`
--

INSERT INTO `xyz_poll_data` (`id`, `poll_id`, `title`) VALUES
(1, 1, 'HTML'),
(2, 1, 'CSS'),
(3, 1, 'JavaScript'),
(4, 1, 'PHP'),
(5, 1, 'MySQL'),
(6, 1, 'XML'),
(7, 1, 'Joomla'),
(8, 1, 'Раскрутка сайта'),
(9, 2, 'JQuery+Ajax'),
(10, 2, 'Создание мощного движка с нуля (как на этом сайте)'),
(11, 2, 'PHP+MySQL (С нуля до профи)');

-- --------------------------------------------------------

--
-- Структура таблицы `xyz_poll_voters`
--

DROP TABLE IF EXISTS `xyz_poll_voters`;
CREATE TABLE IF NOT EXISTS `xyz_poll_voters` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `poll_data_id` int(10) UNSIGNED NOT NULL,
  `ip` bigint(20) NOT NULL,
  `date` int(10) UNSIGNED NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `xyz_poll_voters`
--

INSERT INTO `xyz_poll_voters` (`id`, `poll_data_id`, `ip`, `date`) VALUES
(1, 11, 2130706433, 1399838478),
(2, 9, 1834439578, 1505984336);

-- --------------------------------------------------------

--
-- Структура таблицы `xyz_quotes`
--

DROP TABLE IF EXISTS `xyz_quotes`;
CREATE TABLE IF NOT EXISTS `xyz_quotes` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `author` varchar(100) NOT NULL,
  `text` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `xyz_quotes`
--

INSERT INTO `xyz_quotes` (`id`, `author`, `text`) VALUES
(1, 'Альберт Эйнштейн', 'Жизнь — как вождение велосипеда. Чтобы сохранить равновесие, ты должен двигаться.'),
(2, 'Альберт Эйнштейн', 'Бессмысленно продолжать делать то же самое и ждать других результатов.'),
(3, 'Альберт Эйнштейн', 'Ты никогда не решишь проблему, если будешь думать так же, как те, кто ее создал.'),
(4, 'Ги де Мопассан', 'Жизнь — гора: поднимаешься медленно, спускаешься быстро.'),
(5, 'Конфуций', 'Когда, совершив ошибку, не исправил её, это и называется совершить ошибку.');

-- --------------------------------------------------------

--
-- Структура таблицы `xyz_sections`
--

DROP TABLE IF EXISTS `xyz_sections`;
CREATE TABLE IF NOT EXISTS `xyz_sections` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `img` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `meta_desc` varchar(255) NOT NULL,
  `meta_key` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `xyz_sections`
--

INSERT INTO `xyz_sections` (`id`, `title`, `img`, `description`, `meta_desc`, `meta_key`) VALUES
(1, 'HTML', 'html.jpg', '<p><b>HTML</b> - это гипертекстовый язык разметки, на котором создаётся абсолютное большинство страниц в Интернете. Его знание необходимо абсолютно любому Web-мастеру, причём совершенно не важно, как Вы создаёте сайты: абсолютно с нуля или же с помощью какой-нибудь <b>CMS</b>. И в первом, и во втором случае Вы будете использовать <b>язык HTML</b>.</p><p>Поэтому данный раздел сайта является обязательным к изучению абсолютно для всех Web-мастеров.</p><p>Язык <b>HTML</b>, несмотря на свою простоту, является необычайно важным для изучения. Надеюсь, здесь даже споров и сомнений у Вас не возникнет.</p><p>Сам язык <b>HTML</b> состоит из множества элементов, так называемых <b>тегов HTML</b>. Каждый <b>тег HTML</b> выполняет свою задачу: одни вставляют ссылку, другие картинку, третьи создают таблицы для выравнивания других тегов, четвёртые позволяют делать отдельные блоки на странице, - все эти элементы Вы будете использовать при создании своих сайтов. И вот почти со всеми <b>HTML тегами</b> я Вам и предлагаю познакомиться в соответствующей категории, посвящённой основам HTML. В этой категории собраны статьи, которые позволят любому человеку уже начать создавать свой сайты. Прочитав и освоив то, что написано в данной категории, в принципе, уже достаточно для создания многих сайтов, которые Вы ежедневно видите в сети.</p><p>Так же не так давно появился <b>HTML 5</b>. Это расширенный стандарт языка гипертекстовой разметки, который ждали почти 10 лет. В него вошло множество новых элементов, расширяющих возможности Web-мастеров при вёрстке сайтов, в частности. Данному стандарту на сайте отведена специальная категория, которая так и называется HTML 5. В этой категории я познакомлю Вас с новыми элементами и их назначением. Конечно, будет множество примеров <b>HTML-кода</b>.</p><p>Разумеется, все материалы <b>абсолютно бесплатны</b>, чтобы любой желающий мог познакомиться с этим, без спору, очень интересным делом - <b>созданием сайта на HTML</b>.</p>\r\n<h3 style=\"text-align: center;\">Свежие материалы по созданию сайта на HTML</h3>', 'Множество материала по основам HTML, а также по новому стандарту - HTML 5.', 'html, html 5, язык html, создать сайт на html, html теги'),
(2, 'CSS', 'css.jpg', '<p><b>CSS</b> (<i>Cascading Style Sheets)</i> - это каскадные таблицы стилей. Или, если объяснить это более понятным языком, <b>CSS</b> - это технология описания внешнего вида страниц, написанных на <b>HTML</b>.</p><p>Главная задача таблиц стилей - это разделить код страниц и её внешний вид. Возможно, что Вы спросите: \"<i>А зачем нужно так делать?</i>\". Ответ очевиден: \"<i>Для большей мобильности</i>\". Действительно, допустим у Вас имеется сайт, на котором 100 страниц (это совсем немного). Допустим, шрифт обычного текста у Вас на сайте - 15pt. И представьте, что Вам захотелось сделать не 15pt, а 17pt, что Вы будете делать?</p><p>Если Вы не используете <b>CSS</b>, то Вам придётся в каждой из 100 страниц, в каждом месте, где вставляется текст исправлять с 15pt на 17pt. Разумеется, займёт это несколько часов.</p><p>Если Вы используете <b>CSS</b>, то тогда Вам требуется лишь открыть специальный файл со стилями, найти в этом файле задание размера шрифта и всего один раз изменить с 15pt на 17pt. И Ваш сайт полностью и сразу преобразится. Я уже молчу про массу возможностей создания необычных дизайнерских решений с помощью <b>CSS</b>, которые невозможно реализовать только с помощью <b>HTML</b>.</p><p>Уверен, что Вы уже осознали преимущество <b>CSS</b> перед обычной \"смесью\" структуры и стиля.</p><p>А теперь встаёт главный вопрос: как же познакомиться с этой чудо-технологией и где можно узнать про эту несомненно важную часть создания своего сайта, чтобы у Вас появилось ещё больше информации о том: \"Как создать свой сайт\".</p><p>Собственно, Вы уже нашли, что искали: в данном разделе сайта находится информация по основам CSS, где Вы сможете узнать обо всех <b>селекторах и атрибутах CSS</b>, которые Вам обязательно потребуется при создании дизайна сайта.</p><h3 style=\"text-align: center;\">Свежие материалы по CSS</h3>', 'Различная информация и материалы по CSS - каскадным таблицам стилей.', 'css, селекторы css, атрибуты css'),
(3, 'Шаблоны проектирования', 'patterns.jpg', '<p><b>Шаблоны проектирования</b> — это способ решения периодически возникающих проблем. Точнее, это руководства по решению конкретных проблем. Это не классы, пакеты или библиотеки, которые вы можете вставить в своё приложение и ожидать волшебства.</p>\r\n<p>Как сказано в Википедии:</p\r\n<p><blockquote>В программной инженерии шаблон проектирования приложений — это многократно применяемое решение регулярно возникающей проблемы в рамках определённого контекста архитектуры приложения. Шаблон — это не законченное архитектурное решение, которое можно напрямую преобразовать в исходный или машинный код. Это описание подхода к решению проблемы, который можно применять в разных ситуациях.</blockquote></p><p><b>Виды шаблонов проектирования</b></p><p><ul><li>Порождающие</li><li>Структурные</li><li>Поведенческие</li></ul></p>', 'Шаблоны проектирования - это руководства по решению конкретных проблем.', 'Шаблоны проектирования, паттерны, Простая фабрика, Фабричный метод,\r\nАбстрактная фабрика, Строитель,\r\nПрототип, Одиночка'),
(4, 'Мои проекты', 'project.png', '<p>Здесь размещаются мои проекты которые уже разработаны или находятся в разработке на сегодняшний день</p><p><p>Устраиваясь работать на фирму моими основными обязанностями было сопровождение серверов компании и доработка CRM” КЛиК” под бизнеслогику компании. Серверная часть на MS SQL (Там я натренировался разрабатывать реляционные базы данных, функции, триггеры, писать запросы, собирать их в хранимые процедуры) и клиентская – скрипты на API на VB Script (Без предоставления какой-либо вменяемой документации по нему разработчиками. Есть предположении что у них её в принципе не было). После окончания разработки задачами по программированию стала сопровождение и доработка сайта на CMS Joomla. Э то работа с шаблоном (дизайн), разработка модуля по асинхронные дозагрузки статей (jQuery, AJAX, php, jFactory). Тогда я решил углубится в изучения вэб программирования. Освоив PHP, MySQL, основные шаблоны проектирования, изучив курс по разработке движка сайта с нуля (облегченная вариант Zend Framework, со слов автора курса) написал этот сайт. В дальнейшем планирую дописать регистрацию пользователей по email, чпу, Админпанель , когда будет время на доработку.  В данный момент  изучаю AngularJS  и веду разработку  SPA  по подбору оборудования из прайса фирмы по измерительному диапазону и погрешности измерения. <p/>', '', '');

-- --------------------------------------------------------

--
-- Структура таблицы `xyz_sef`
--

DROP TABLE IF EXISTS `xyz_sef`;
CREATE TABLE IF NOT EXISTS `xyz_sef` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `link` varchar(255) NOT NULL,
  `alias` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `xyz_sef`
--

INSERT INTO `xyz_sef` (`id`, `link`, `alias`) VALUES
(1, '/poll', 'poll'),
(2, '/register', 'register'),
(3, '/activate', 'activate'),
(4, '/sregister', 'sregister'),
(5, '/reset', 'reset'),
(6, '/sreset', 'sreset'),
(7, '/logout', 'logout'),
(8, '/remind', 'remind'),
(9, '/search', 'search'),
(10, '/user/editprofile', 'user/editprofile'),
(11, '/section?id=1', 'html'),
(12, '/section?id=2', 'css'),
(13, '/category?id=1', 'html-osnovy'),
(14, '/category?id=2', 'html-5'),
(15, '/category?id=3', 'css-osnovy'),
(16, '/article?id=1', 'html-sozdanie-sajta'),
(17, '/article?id=2', 'html-ssylki-i-izobrageniya'),
(18, '/article?id=3', 'css-sintaksis'),
(19, '/article?id=4', 'css-kak-zadat-stil'),
(20, '/article?id=5', 'css-selektory'),
(21, '/article?id=6', 'srs');

-- --------------------------------------------------------

--
-- Структура таблицы `xyz_users`
--

DROP TABLE IF EXISTS `xyz_users`;
CREATE TABLE IF NOT EXISTS `xyz_users` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `login` varchar(100) NOT NULL,
  `email` varchar(100) NOT NULL,
  `password` varchar(32) NOT NULL,
  `name` varchar(255) NOT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `date_reg` int(10) UNSIGNED NOT NULL,
  `activation` varchar(32) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `login` (`login`,`email`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `xyz_users`
--

INSERT INTO `xyz_users` (`id`, `login`, `email`, `password`, `name`, `avatar`, `date_reg`, `activation`) VALUES
(1, 'User1', 'user1@mail.ru', 'c9f96d0a92a4cf0ce52250f62f52c2c9', 'Алексей', NULL, 1399121160, ''),
(2, 'Aleks', 'aleks@mail.ru', '8bbcd6a4c613267b9d84114c06d32b17', 'Александр', 'user_2.gif', 1399121267, ''),
(3, 'alekss', 'asd@mail.ru', '8bbcd6a4c613267b9d84114c06d32b17', 'Алекс', NULL, 1399918936, '5371115820d10'),
(4, 'aleksss', 'asdd@mail.ru', '8bbcd6a4c613267b9d84114c06d32b17', 'Алекс', NULL, 1399918986, '5371118a6895a'),
(5, 'al', 'asda@mail.ru', '235d5c2906bc9f6b73ac73d159d27c75', 'Алекс', '53711c89a1928.jpeg', 1399919061, '');
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
